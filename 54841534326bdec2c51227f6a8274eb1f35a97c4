{
  "comments": [
    {
      "key": {
        "uuid": "84c5d2f1_7d6a95b3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "Thank you very much for the offer. We would be happy if you looked into the backend implementation.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 30
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aa113de_d6c8c80f",
        "filename": "pages/design-docs/plugins/checks/sub-checks/index.md",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "Isn\u0027t this saying the same thing twice/thrice over? ;-)",
      "range": {
        "startLine": 3,
        "startChar": 3,
        "endLine": 3,
        "endChar": 41
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5828ca58_d15e51ac",
        "filename": "pages/design-docs/plugins/checks/sub-checks/index.md",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-09-20T22:04:23Z",
      "side": 1,
      "message": "I\u0027m very optimistic that this is the solution.  :)",
      "parentUuid": "1aa113de_d6c8c80f",
      "range": {
        "startLine": 3,
        "startChar": 3,
        "endLine": 3,
        "endChar": 41
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf703d1d_592d9f52",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "For sub-checks, will the default state also be NOT_STARTED if a state was never specified?",
      "range": {
        "startLine": 16,
        "startChar": 2,
        "endLine": 16,
        "endChar": 28
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9e0cdcf_d4aff59b",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-09-20T22:04:23Z",
      "side": 1,
      "message": "That seems reasonable and simple.  The way I would expect to implement this  in Zuul, is to always set \u0027state\u0027 and it would never be NOT_STARTED -- the earliest state value would be SCHEDULED.  So as an implementor, I would be fine with this as described, or either of the following changes would also be fine:\n\n* Make state required.\n* If state is required, disallow NOT_STARTED.",
      "parentUuid": "cf703d1d_592d9f52",
      "range": {
        "startLine": 16,
        "startChar": 2,
        "endLine": 16,
        "endChar": 28
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85d34fa3_cbaf1f0d",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-10-04T15:55:10Z",
      "side": 1,
      "message": "As there are different use cases out in the wild, I would try to keep this as flexible as possible and hence not make the state required or even disallow some values. Also for consistency reasons, it might make sense to offer the same behavior for checks and sub-checks. Let\u0027s go with the default state NOT_STARTED.",
      "parentUuid": "d9e0cdcf_d4aff59b",
      "range": {
        "startLine": 16,
        "startChar": 2,
        "endLine": 16,
        "endChar": 28
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d92e06d5_f768cada",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-10-29T21:41:03Z",
      "side": 1,
      "message": "Sounds good, I\u0027ll make that clear in PS4.",
      "parentUuid": "85d34fa3_cbaf1f0d",
      "range": {
        "startLine": 16,
        "startChar": 2,
        "endLine": 16,
        "endChar": 28
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec8873f0_00f8bd8b",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "In theory, this might also be some other page showing some details for a sub-check (e.g. build output while the sub-check is running) but I currently cant\u0027 think of a better, concise formulation for this.",
      "range": {
        "startLine": 18,
        "startChar": 62,
        "endLine": 18,
        "endChar": 92
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "020a7415_c2ed094f",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-09-20T22:04:23Z",
      "side": 1,
      "message": "Indeed, that\u0027s one of the best features of the API.  Maybe \"status or result\" captures it without adding too much?",
      "parentUuid": "ec8873f0_00f8bd8b",
      "range": {
        "startLine": 18,
        "startChar": 62,
        "endLine": 18,
        "endChar": 92
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0aff78f_a4900d5f",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "I think we should introduce a sub data structure for properties like \"rerunnable\" as I envision more to come and it would be nice to group these \u0027config\u0027 properties.",
      "range": {
        "startLine": 21,
        "startChar": 2,
        "endLine": 21,
        "endChar": 14
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb913967_965ab7ab",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-09-20T22:04:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0aff78f_a4900d5f",
      "range": {
        "startLine": 21,
        "startChar": 2,
        "endLine": 21,
        "endChar": 14
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acfed90d_870d9796",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "For checks, we allow partial updates. Extending this concept to the list of sub-checks would mean that a provided list would not override all already know information about sub-checks but only update the sub-checks which are contained in the provided list. Does this sound reasonable to you?\n\nAn additional question would be whether we should also allow partial updates for sub-check details (e.g. any input field which is not provided is not overriden). I would say so but would like to hear your opinion on this.",
      "range": {
        "startLine": 29,
        "startChar": 25,
        "endLine": 30,
        "endChar": 65
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18587f73_24e8765a",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-09-20T22:04:23Z",
      "side": 1,
      "message": "My preference would be not to perform partial updates of sub-checks, but rather overwrite the entire sub_checks entry of the check each time.  Mostly to accommodate the removal of sub-checks.\n\nIn Zuul, it\u0027s not unheard-of for a reconfiguration which removes a job to occur partway through a set of jobs for a change (indeed, this happened enough that we have quite a few regression tests for it).  We should handle this case in Gerrit one way or another.\n\nThe easiest way to handle it, both in Zuul and Gerrit, would be to disallow partial updates of the sub_checks field.  I think most checkers would have a complete view of all the sub-checks at any given time (after all, they have to identify which check to update, so there is a natural point of convergence for sub-checks), and so could provide all of the data during each update.\n\nIf, however, we did want to allow partial updates, we need to decide how to handle removal of a sub-check.  Do we require the system to send an entry for the sub-check but add an extra field to indicate removal?  Do we not allow sub-checks to be removed, but simply suggest setting state\u003dNOT_RELEVANT in this case?  Both of those are possible but would require extra work in Zuul to continue tracking the state of discarded jobs longer.\n\nAnother option would be to perform partial updates by default, but add a boolean flag to CheckInput indicating that the sub_checks field is a complete, rather than partial update.  Essentially, we could implement both behaviors with a flag to toggle between them.  This would also be simple to implement in Zuul.",
      "parentUuid": "acfed90d_870d9796",
      "range": {
        "startLine": 29,
        "startChar": 25,
        "endLine": 30,
        "endChar": 65
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "259dcd78_f85974a4",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-10-04T15:55:10Z",
      "side": 1,
      "message": "I heard of some use cases which do require that sub-checks aren\u0027t reported in bulk. So, I think we should support this as well.\n\nAll other fields of checks have a null-value with which their value can be unset. We could define that specifying an empty list of sub-checks removes any sub-checks of that check. By sending that value and afterwards posting again the relevant sub-checks, it would be possible to remove a sub-check which isn\u0027t run anymore. Would this work for Zuul?",
      "parentUuid": "18587f73_24e8765a",
      "range": {
        "startLine": 29,
        "startChar": 25,
        "endLine": 30,
        "endChar": 65
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd7d7507_d9c0b5ca",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-10-29T21:41:03Z",
      "side": 1,
      "message": "Yes.  It won\u0027t be the most trivial implementation (because I don\u0027t want to send two API requests for each update, so will need to add some more state tracking), but I don\u0027t think it should be too hard, and it does not seem like too great of a thing to ask of an API user.\n\nI\u0027ll update the next PS to reflect this (including your description of the uses of omitted and empty-list values in your comment on line 39).",
      "parentUuid": "259dcd78_f85974a4",
      "range": {
        "startLine": 29,
        "startChar": 25,
        "endLine": 30,
        "endChar": 65
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78574271_67656333",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "Similarly as we have CheckInput and CheckInfo, we should also have SubCheckInput and SubCheckInfo. You probably meant this but there\u0027s a small aspect why this is important for me: SubCheckInfo might be slightly different than SubCheckInput. Overall, they should contain the same data but there might be some differences. For instance, we might have a \u0027required\u0027 config parameter and a \u0027required\u0027 info flag of a sub-check (\u003d whether it is really considered as required for submit for the change; see my other comment below). The latter would be indicated by an additional field in SubCheckInfo.",
      "range": {
        "startLine": 32,
        "startChar": 11,
        "endLine": 33,
        "endChar": 28
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d0b11fd_bccc6376",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-09-20T22:04:23Z",
      "side": 1,
      "message": "Indeed that was more or less what I was imagining; I\u0027m including explicit definitions in the next PS.",
      "parentUuid": "78574271_67656333",
      "range": {
        "startLine": 32,
        "startChar": 11,
        "endLine": 33,
        "endChar": 28
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79173323_76d22a21",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "For the internal, Java representation, I agree. For Gson (especially the REST API), I think we should stay consistent with the rest of Gerrit and treat the empty list as the \u0027unset\u0027 value. This means that checks which are explicitly updated with an empty list as sub-checks will get all of their sub-checks deleted. When a check with no sub-checks is returned from the Gerrit backend via Gson, the sub-check field will be omitted (exactly as we do e.g. for boolean values which are false or other objects which are null).",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 5
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37cade85_8949a6e6",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "FYI: This isn\u0027t implemented yet nor defined in a design doc. I agree, though, that we do want to have it.",
      "range": {
        "startLine": 51,
        "startChar": 23,
        "endLine": 52,
        "endChar": 61
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6cd7ed6_c2e98467",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-09-20T22:04:23Z",
      "side": 1,
      "message": "Yes -- I think the point I wanted to make here is that we expect the sub-check to be subservient to the parent check in terms of any future restrictions like this.",
      "parentUuid": "37cade85_8949a6e6",
      "range": {
        "startLine": 51,
        "startChar": 23,
        "endLine": 52,
        "endChar": 61
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96975535_61a8c318",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-10-04T15:55:10Z",
      "side": 1,
      "message": "Okay. Sounds good.",
      "parentUuid": "b6cd7ed6_c2e98467",
      "range": {
        "startLine": 51,
        "startChar": 23,
        "endLine": 52,
        "endChar": 61
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bf96d82_0e7c3de5",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "In general, how would you expect the overall check status to behave? Do you think it should be explicitly set by the checker? Or should it be derived from the sub-checks? Or should it maybe not matter anymore in any way?",
      "range": {
        "startLine": 54,
        "startChar": 29,
        "endLine": 54,
        "endChar": 68
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "170ab9f9_9dc0748a",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-09-20T22:04:23Z",
      "side": 1,
      "message": "I think the overall status is still useful (Zuul maintains both an overall status for the BuildSet(\u003dcheck) as well as each Build(\u003dsub-check).  I think it would be both simple and sufficient for Gerrit to only consider the overall check state and treat sub-check states as purely informative (to the point that they could disagree -- caveat implementor).  I\u0027d be okay with that.\n\nBut if we want to avoid that, then perhaps we could derive overall check state from sub-check state?  I think taking the first match from the following list would work?\n\n* All sub-checks completed and all required sub-checks successful: successful.\n* All sub-checks completed and any required sub-check failed: failed.\n* Any sub-check not_started: not_started.\n* Any sub-check running: running.\n* Any sub-check scheduled: scheduled.\n* All sub-checks not_relevant: not_relevant.\n\nWe could also just do that if the check state is omitted?\n\nI don\u0027t have a strong preference.  I\u0027d be happy to implement any of the options, and I don\u0027t think any of them would be a problem for Zuul.",
      "parentUuid": "7bf96d82_0e7c3de5",
      "range": {
        "startLine": 54,
        "startChar": 29,
        "endLine": 54,
        "endChar": 68
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7e53448_27b263d1",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-10-04T15:55:10Z",
      "side": 1,
      "message": "In the future, we might need to make this configurable but for the beginning, let\u0027s go with: Don\u0027t automatically derive the check state from the sub-check state but also block on required sub-checks. This way, systems like Zuul have the most flexibility. They have to ensure themselves, though, that what they post makes sense to the user.",
      "parentUuid": "170ab9f9_9dc0748a",
      "range": {
        "startLine": 54,
        "startChar": 29,
        "endLine": 54,
        "endChar": 68
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea384a34_40bd7f25",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-10-29T21:41:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7e53448_27b263d1",
      "range": {
        "startLine": 54,
        "startChar": 29,
        "endLine": 54,
        "endChar": 68
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e05fad7_157355dd",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "typo: checker",
      "range": {
        "startLine": 55,
        "startChar": 13,
        "endLine": 55,
        "endChar": 19
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc16c861_7b7ff9ef",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-09-20T22:04:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e05fad7_157355dd",
      "range": {
        "startLine": 55,
        "startChar": 13,
        "endLine": 55,
        "endChar": 19
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1b6bcb0_93011899",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "I would have thought that we would use the same mechanism for sub-checks as for checks regarding re-run: The checker should simply query for pending checks when getting the event and the reset sub-checks will show up in the result again. This in turn would lead to sub-checks being re-run.\n\nIn any case, it would be helpful to have a separate paragraph which details how the pending checks endpoint behaves in the context of sub-checks.",
      "range": {
        "startLine": 55,
        "startChar": 41,
        "endLine": 57,
        "endChar": 52
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "752d0b43_800b084a",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-09-20T22:04:23Z",
      "side": 1,
      "message": "I *think* we agree -- the salient points are that the pending checks endpoint does not consider sub-checks at all, and the way to cause a checker to re-run a subcheck is to set the overall check status to NOT_STARTED so that it appears in the next poll by the checker, and also to set the sub-check status to NOT_STARTED so that the checker notices it needs to re-run the sub-check.\n\nI\u0027ve updated the next PS to clarify.",
      "parentUuid": "b1b6bcb0_93011899",
      "range": {
        "startLine": 55,
        "startChar": 41,
        "endLine": 57,
        "endChar": 52
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6562bff6_ae340fe8",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-10-04T15:55:10Z",
      "side": 1,
      "message": "Thanks for the additional details. I actually think that the pending checks endpoint should be adjusted to also report pending sub-checks, not on the same level as checks but as a sub-entity specifying their name and state. Thus, we can also distinguish between re-running individual sub-checks (\u003c- only set the sub-check to NOT_STARTED) and re-running the checker completely (\u003c- use re-run on the checker level to set the checker to NOT_STARTED and remove any sub-checks). The latter might also include new sub-checks (or less sub-checks) and is requested by not naming sub-checks in pending checks, whereas the former re-runs exactly the requested ones by naming them. Hence, I wouldn\u0027t automatically set the checker to NOT_STARTED if re-run is used on a sub-check.\n\nI know that we might want to show different attempts in the future, both on the check and sub-check level. This might mean that we internally still keep some references to previous sub-check attempts but we can think about that when we implement that feature. At the moment, we would just override everything.",
      "parentUuid": "752d0b43_800b084a",
      "range": {
        "startLine": 55,
        "startChar": 41,
        "endLine": 57,
        "endChar": 52
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06bf49e3_28027c9f",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-10-29T21:41:03Z",
      "side": 1,
      "message": "I think that will work, but I guess we will need to add an extra field to the index in Gerrit so that we can search for changes with pending sub-checks.\n\nI\u0027ve updated this in PS4 -- let me know if that\u0027s what you had in mind.",
      "parentUuid": "6562bff6_ae340fe8",
      "range": {
        "startLine": 55,
        "startChar": 41,
        "endLine": 57,
        "endChar": 52
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87686d29_d726265d",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "Could we rename this to \u0027sub_check_name\u0027 or just \u0027sub-check\u0027 so that it\u0027s a bit more obvious that the parameter relates to sub-checks?",
      "range": {
        "startLine": 60,
        "startChar": 10,
        "endLine": 60,
        "endChar": 14
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcdd66aa_f4072607",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "Overall, this sounds very reasonable.",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 60,
        "endChar": 8
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3f9567b_316c084f",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-10-29T21:41:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87686d29_d726265d",
      "range": {
        "startLine": 60,
        "startChar": 10,
        "endLine": 60,
        "endChar": 14
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cdbbf69_6f373e04",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "Even though I wrote in the original design-doc that sub-checks should only be considered as optional, I\u0027ve heard of use cases for which it would be crucial that sub-checks can also be required. Hence, I\u0027ve changed my opinion. I think we should include a \"required\" field in the SubCheckInput. However, only sub-checks whose check is also required will block submission of the change, which will be indicated by the \"For submit\" field.\n\nOf course, we can also add the \"required\" field as a later improvement.",
      "range": {
        "startLine": 66,
        "startChar": 27,
        "endLine": 67,
        "endChar": 25
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fc10c5f_46ffbedb",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-09-20T22:04:23Z",
      "side": 1,
      "message": "I\u0027m happy to include that now.  Zuul has a notion of voting and non-voting jobs which should map well to that.  I\u0027ve updated accordingly, and put the required field in the new config dictionary.",
      "parentUuid": "4cdbbf69_6f373e04",
      "range": {
        "startLine": 66,
        "startChar": 27,
        "endLine": 67,
        "endChar": 25
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e613b48a_5cbb53b4",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-10-04T15:55:10Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "7fc10c5f_46ffbedb",
      "range": {
        "startLine": 66,
        "startChar": 27,
        "endLine": 67,
        "endChar": 25
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d98709c_127f9dc8",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-09-13T21:41:32Z",
      "side": 1,
      "message": "Would you mind if we chose a a bit different UI representation in the end? I can think of several possibilities, for example: not the whole row of a sub-check is indented.",
      "range": {
        "startLine": 67,
        "startChar": 28,
        "endLine": 69,
        "endChar": 56
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0874b42e_15443fdf",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2019-09-20T22:04:23Z",
      "side": 1,
      "message": "That\u0027s fine!  Something which is nearly like what I described but with better use of space would be a sort of table where the background of sub-checks is a different color, but checks and sub-checks otherwise look the same.  That would probably look better on mobile devices.\n\nI left comments on the parent change about what I think are the useful UX features we get from solutions like these, so maybe that will help when considering other options.\n\nI thought this should at least have some consideration of a UI.  I\u0027ve adjusted the wording slightly to not suggest indenting as the only option.",
      "parentUuid": "9d98709c_127f9dc8",
      "range": {
        "startLine": 67,
        "startChar": 28,
        "endLine": 69,
        "endChar": 56
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c52822d_6b5a0d6c",
        "filename": "pages/design-docs/plugins/checks/sub-checks/solution-0.md",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-10-04T15:55:10Z",
      "side": 1,
      "message": "The different coloring might be a good option. I\u0027ll keep it in mind.",
      "parentUuid": "0874b42e_15443fdf",
      "range": {
        "startLine": 67,
        "startChar": 28,
        "endLine": 69,
        "endChar": 56
      },
      "revId": "54841534326bdec2c51227f6a8274eb1f35a97c4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}