{
  "comments": [
    {
      "key": {
        "uuid": "40fa7557_e1ba2101",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-09T05:50:55Z",
      "side": 1,
      "message": "I feel like this section could use a lot more to explain the problems with the current system. From what I read above, it is hard to see the need for many of the solutions suggested below since from this description one might think that the caching design is the only thing that is problematic. As I read more down below, it seems that there might be more performance problems than just the cache?  Is the single ref with lots of data that also needs to be updated too slow to write? Is the single ref needing to be updated also a ref lock contention?",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c7ab412_f9893ac4",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-09T05:50:55Z",
      "side": 1,
      "message": "If I understand what you are proposing here (which I very well may not), it seems like this sharding scheme will not actually reduce your lock contention at all in the open source world. It would if the refs in question were treated as loose refs, but if you are to take advantage of atomic ref updates across multiple refs, then the ref updates will all happen on the packedrefs file. Updating the packedrefs files uses a single lock for the entire file, so no matter what shard you update you will be sharing a single lock.\n\nI suspect that not only will the sharding not improve lock contention, it has a good chance of increasing it since updating the packedrefs file takes a lot longer than updating loose refs since all the packedrefs need to be rewritten instead  of just the individual 40 bytes of a loose ref. :(",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}