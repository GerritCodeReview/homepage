{
  "comments": [
    {
      "key": {
        "uuid": "adc83c6b_eddc841a",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-07-09T17:35:48Z",
      "side": 1,
      "message": "Martin, this is the bit that causes performance problems. We get account data from a cache that is keyed on a SHA1 that depends on all external IDs of all the users put together.  If one user changes their email, computing a new entry has to iterate over all users, halting interactions for everyone logged in.",
      "range": {
        "startLine": 28,
        "startChar": 84,
        "endLine": 28,
        "endChar": 120
      },
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea4cf9e8_c12d5d16",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-07-09T17:37:40Z",
      "side": 1,
      "message": "and to answer your question: in the new design, the cache is not keyed in such global manner.",
      "parentUuid": "adc83c6b_eddc841a",
      "range": {
        "startLine": 28,
        "startChar": 84,
        "endLine": 28,
        "endChar": 120
      },
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb623aba_f0957f5f",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-09T18:18:07Z",
      "side": 1,
      "message": "Thanks, makes sense.\n\nIf the cache is the problem, then I would favor a solution to the cache problem that does not redesign the primary storage. Performance is in the details and if we know where a problem is, let\u0027s fix it directly without changing so much that we potentially introduce new performance problems in new areas. Can we make the cache be by account, by email, and by external id without changing the primary storage?",
      "parentUuid": "ea4cf9e8_c12d5d16",
      "range": {
        "startLine": 28,
        "startChar": 84,
        "endLine": 28,
        "endChar": 120
      },
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60282344_f28157d3",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-09T19:46:44Z",
      "side": 1,
      "message": "Could you add some details here as to how this is slow? i.e. How does \"holding an entire generation of all external IDs\" make it slow? If slow updating, how long does this take for a sample size, milliseconds, seconds, minutes...? How much data is it updating? What is causing the update to be slow, is it parsing the data, is it writing the data to git, to H2? Without this information it is nearly impossible to be able to review a solution and say \"yes, this solution could indeed help alleviate that problem\". Without this data it is impossible for someone to notice that a piece that you measured to be slow shouldn\u0027t be slow, and that maybe there is some naive n^2 algo in there that can easily be fixed.",
      "parentUuid": "eb623aba_f0957f5f",
      "range": {
        "startLine": 28,
        "startChar": 84,
        "endLine": 28,
        "endChar": 120
      },
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40fa7557_e1ba2101",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-09T05:50:55Z",
      "side": 1,
      "message": "I feel like this section could use a lot more to explain the problems with the current system. From what I read above, it is hard to see the need for many of the solutions suggested below since from this description one might think that the caching design is the only thing that is problematic. As I read more down below, it seems that there might be more performance problems than just the cache?  Is the single ref with lots of data that also needs to be updated too slow to write? Is the single ref needing to be updated also a ref lock contention?",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b6c6091_cf480ded",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-07-09T06:59:27Z",
      "side": 1,
      "message": "\u003e Is the single ref with lots of data that also needs to be updated too slow to write?\n\nIn our case, yes: \u0027git-sizer\u0027 on All-Users.git on GerritHub.io shows as concerning:\nrefs/meta/external-ids^{tree}\n\n\u003e Is the single ref needing to be updated also a ref lock contention?\n\nYes, and from multiple nodes also.",
      "parentUuid": "40fa7557_e1ba2101",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70846806_1ff3f6bb",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-09T16:06:53Z",
      "side": 1,
      "message": "\u003e In our case, yes: \u0027git-sizer\u0027 on All-Users.git on GerritHub.io shows as concerning:\nrefs/meta/external-ids^{tree}\n\nCan you add some details? Can you put a number on how long it takes to update, milliseconds, seconds, minutes...?\n\nI am trying to get a better understanding of the problem that is attempting to be solved here. I am having a hard time imagining lock contention on 500 updates in a day, that\u0027s only about 21 updates an hour? Are the updates taking around 3 minutes each?",
      "parentUuid": "4b6c6091_cf480ded",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "013b472a_005d4c7c",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-09T16:29:14Z",
      "side": 1,
      "message": "I\u0027ll fill in some details here tomorrow.\n\nI think the 500 need to be broken down over an ~8hr workday, so that would make 1 per minute - still no contention.\n\nThis requirement came out of the design discussions we had at the last hackathon and Luca talked about some numbers that he is seeing in their installations that show a desire for sharding and less contention, so we added it to the design.\n\nLuca, do you have these number at hand so that I can add them to the doc?\n\nFor what it is worth: Contention isn\u0027t a problem we currently see in our installations given the update rates we have. Factoring in growth, that might not be true forever, though. I think one use case where contention can kick in is when you want to create a number of accounts in a small time frame (say a batch of 50).\n\nWe\u0027ve seen other bottlenecks making Gerrit fall over - for example if a lot of users want a new account and the sequencer only generates sequences of 1. Given this experience, I think there is a general desire to scale down on (potential) bottlenecks where possible.",
      "parentUuid": "70846806_1ff3f6bb",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7090bf6e_fb305b5c",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-09T19:16:36Z",
      "side": 1,
      "message": "As you may have seen, I have been guessing a lot as to the problem(s) based on the solution(s). That is because I am missing the part where this docs says \"design X will be faster than design Y because of Z\". It would be good to make sure that any solution(s) proposed here can easily be connected to the problem(s) outlined, so that the trail can easily be seen by the reader. For example, I don\u0027t know which specific things are supposed to improve performance, I have to guess.  Perhaps it\u0027s the sharding, perhaps its\u0027 the NoteMaps, perhaps it\u0027s using different refs for emails versus externalids, perhaps it\u0027s putting the externalids in a separate file from other account info? Sometimes it is easy to assume the reader will recognize why a proposed solution is faster, but either the reader (I know I miss-read a bunch of stuff, I apologize) or writer could be making false assumptions. By pointing out the intent of each design feature: performance, data integrity, space reduction... (many of these intents are in the doc, or now in the comments, and some are still missing), it will hopefully be more obvious where the miss-understandings are. I hope that another patchset might point these things out a bit more.\n\nRight now this redesign feels big so I would also suggest to focus on the #1 thing you are trying to achieve. For anything that is secondary, perhaps word it as a follow on improvement that could happen if still desired. This way you avoid premature optimization and you make your original objective more achievable and more reviewable and not dependent on too many things.",
      "parentUuid": "013b472a_005d4c7c",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b145b850_2cb96cc0",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-09T19:46:44Z",
      "side": 1,
      "message": "Can you explain why all the ids are re-read from the repo? Doesn\u0027t the updating thread already have that data, should it not be able to shared it with the other threads without them having to read it from git? How long does this re-read take for a sample size? Where is the bottleneck...?",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c7ab412_f9893ac4",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-09T05:50:55Z",
      "side": 1,
      "message": "If I understand what you are proposing here (which I very well may not), it seems like this sharding scheme will not actually reduce your lock contention at all in the open source world. It would if the refs in question were treated as loose refs, but if you are to take advantage of atomic ref updates across multiple refs, then the ref updates will all happen on the packedrefs file. Updating the packedrefs files uses a single lock for the entire file, so no matter what shard you update you will be sharing a single lock.\n\nI suspect that not only will the sharding not improve lock contention, it has a good chance of increasing it since updating the packedrefs file takes a lot longer than updating loose refs since all the packedrefs need to be rewritten instead  of just the individual 40 bytes of a loose ref. :(",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7497e173_a706f708",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-07-09T06:59:27Z",
      "side": 1,
      "message": "\u003e If I understand what you are proposing here (which I very well may not), it seems like this sharding scheme will not actually reduce your lock contention at all in the open source world. It would if the refs in question were treated as loose refs, but if you are to take advantage of atomic ref updates across multiple refs, then the ref updates will all happen on the packedrefs file. Updating the packedrefs files uses a single lock for the entire file, so no matter what shard you update you will be sharing a single lock.\n\nPoint taken: it looks like we would end up exactly with the same problem we would like to resolve. Atomic update of refs won\u0027t be a good idea, at least for us.\n\n\u003e I suspect that not only will the sharding not improve lock contention, it has a good chance of increasing it since updating the packedrefs file takes a lot longer than updating loose refs since all the packedrefs need to be rewritten instead  of just the individual 40 bytes of a loose ref. :(\n\nYes, as the packed refs would be quite big. We would be best to stick with a loose ref update for All-Users.",
      "parentUuid": "7c7ab412_f9893ac4",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "988a2935_a94a4618",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-09T16:29:14Z",
      "side": 1,
      "message": "This is a really helpful comment, thanks!\n\nIf we go with sharding, we could make atomicity configurable to reduce contention by using lose refs. As Jonathan outlined in another comment, there needs to be an fsck functionality anyway, which provides a fallback.",
      "parentUuid": "7497e173_a706f708",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ab50fb7_9b3cde40",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-07-09T17:10:19Z",
      "side": 1,
      "message": "packed-ref storage may not help with contention now, but does it hurt to have the sharding here?\n\nI see these comments as another vote to roll out RefTable to local FS repositories in JGit too, so we get better scalability",
      "parentUuid": "988a2935_a94a4618",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42902d4d_c36de908",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-09T17:18:19Z",
      "side": 1,
      "message": "\u003e I see these comments as another vote to roll out RefTable to local FS repositories in JGit too, so we get better scalability\n\n+1\n\n\u003e packed-ref storage may not help with contention now, but does it hurt to have the sharding here?\n\nI am probably missing something, but what other piece in this redesign besides the sharding is actually aimed at addressing the current performance problem?",
      "parentUuid": "8ab50fb7_9b3cde40",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eabbd963_f855388a",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-09T18:38:15Z",
      "side": 1,
      "message": "\u003e packed-ref storage may not help with contention now, but does it hurt to have the sharding here?\n\nYes, see my previous reply, potentially thousands of times more data to write on each update.",
      "parentUuid": "42902d4d_c36de908",
      "revId": "ed4c4ee4bcaa4b9ff5409623d1331cffbbc59002",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}