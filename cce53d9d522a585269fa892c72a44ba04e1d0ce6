{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7abd3961_60596c0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2025-04-07T06:45:25Z",
      "side": 1,
      "message": "Thanks all for the reviews! Very much appreciated!\n\nI think this doc has reached a state where we can submit it as the first version. \n\nFor everyone who is not familiar with the Gerrit design doc process [1], submitting a solution doesn\u0027t mean that it has been accepted. Accepting a solution is done via the `conclusion.md` doc (that is still empty). This requires a  discussion in the engineering steering committee (ESC).\n\nAfter this change has been submitted everyone is welcome to upload iterative improvements to the doc or suggest alternative solutions.\n\n[1] https://gerrit-review.googlesource.com/Documentation/dev-design-docs.html",
      "revId": "cce53d9d522a585269fa892c72a44ba04e1d0ce6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5142321_46a96237",
        "filename": "pages/design-docs/support-jujutsu/solution.md",
        "patchSetId": 7
      },
      "lineNbr": 235,
      "author": {
        "id": 1011217
      },
      "writtenOn": "2025-04-08T16:30:16Z",
      "side": 1,
      "message": "This general process is a common one for our (OpenDev) users though currently everyone that I know of is using Git. See my comment below for how we might be able to continue to support existing users while adding support for Jujutsu without breaking common use cases like this one.",
      "revId": "cce53d9d522a585269fa892c72a44ba04e1d0ce6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d38b46c3_1b4616f9",
        "filename": "pages/design-docs/support-jujutsu/solution.md",
        "patchSetId": 7
      },
      "lineNbr": 235,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2025-04-09T10:36:16Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b5142321_46a96237",
      "revId": "cce53d9d522a585269fa892c72a44ba04e1d0ce6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22d603f2_164216d7",
        "filename": "pages/design-docs/support-jujutsu/solution.md",
        "patchSetId": 7
      },
      "lineNbr": 432,
      "author": {
        "id": 1011217
      },
      "writtenOn": "2025-04-08T16:30:16Z",
      "side": 1,
      "message": "This item and the [SAVE DEFAULT] item above have me wondering why we don\u0027t update the commit message hook to set the Change-Id: in the commit message to match any existing change-ids from jujutsu? Then continue to require a Change-Id in the commit message for all users which may match the jujutsu change-id if using jujutsu.\n\nDoing this I think you mitigate many of the problems with a mixture of client tooling across users while allowing jujutsu users to take advantage of whatever functionality change-id provides them.\n\nI think this is important because the last thing we should want to do is break existing Gerrit users who continue to use Git and other tools that have worked for them for years (more than a decade for many of us). Adding jujutsu support to help other users seems great, but I think maintaining existing workflows for existing users is also important.",
      "revId": "cce53d9d522a585269fa892c72a44ba04e1d0ce6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "597e7d56_90d397ba",
        "filename": "pages/design-docs/support-jujutsu/solution.md",
        "patchSetId": 7
      },
      "lineNbr": 432,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2025-04-09T10:36:16Z",
      "side": 1,
      "message": "\u003e have me wondering why we don\u0027t update the commit message hook to set the\n\u003e Change-Id: in the commit message to match any existing change-ids from jujutsu?\n\nYeah, we thought about this, but as mentioned below (l. 438) it\u0027s not working:\n* the commit-msg hook doesn\u0027t have access to the source commit and its headers (hence it can\u0027t read the jujutsu change ID)\n* the commit-msg hook is not invoked on rebase/cherry-pick, but only on amend (but amend already preserves the change-id commit header, so we do not need to insert the change ID as a footer in this case).\n\n\u003e I think this is important because the last thing we should want to do is break \n\u003e existing Gerrit users who continue to use Git and other tools that have worked \n\u003e for them for years (more than a decade for many of us). Adding jujutsu support\n\u003e to help other users seems great, but I think maintaining existing workflows for \n\u003e existing users is also important.\n\nYeah, best would be if the Git team could be convinced to preserve the `change-id` commit header on rebase/cherry-pick. The discussion about this [1] is still in progress. First it seemed like they could agree to that (see https://gerrit-review.googlesource.com/c/homepage/+/465461), but then new concerns got raised. So I guess to make a final conclusion, we need to to see what will be the result of this discussion.\n\nIn the meantime we could go with the 2 mitigations that are marked as \"[BEST MITIGATION]\" above.\n\n[1] https://lore.kernel.org/git/Z_OGMb-1oV0Ex05e@pks.im/T/#m038be849b9b4020c16c562d810cf77bad91a2c87",
      "parentUuid": "22d603f2_164216d7",
      "revId": "cce53d9d522a585269fa892c72a44ba04e1d0ce6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX"],"failingAtoms":["label:Code-Review=MIN"],"atomExplanations":{"value":{"label:Code-Review=MAX":"","label:Code-Review=MIN":""}}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cce53d9d522a585269fa892c72a44ba04e1d0ce6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""],"atomExplanations":{"value":{"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\"":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cce53d9d522a585269fa892c72a44ba04e1d0ce6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"],"atomExplanations":{"value":{"has:unresolved":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "patchSetCommitId": "cce53d9d522a585269fa892c72a44ba04e1d0ce6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"],"atomExplanations":{"value":{"is:review-enforced_gerrit":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cce53d9d522a585269fa892c72a44ba04e1d0ce6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"],"atomExplanations":{"value":{"branch:refs/meta/config":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"],"atomExplanations":{"value":{"label:Verified=MAX":"","label:Verified=MIN":""}}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cce53d9d522a585269fa892c72a44ba04e1d0ce6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Want-Code-Review-From-All",
        "description": {
          "value": "A \u0027Code-Review\u0027 vote is required from all human reviewers (service users that are reviewers are ignored)."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "footer:\"Want-Code-Review: all\" -label:Code-Review\u003e\u003d1,users\u003dhuman_reviewers"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003e\u003d1,users\u003dhuman_reviewers"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"footer:\"Want-Code-Review: all\" -label:Code-Review>=1,users=human_reviewers"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review>=1,users=human_reviewers"],"failingAtoms":["footer:\"Want-Code-Review: all\""],"atomExplanations":{"value":{"footer:\"Want-Code-Review: all\"":"","label:Code-Review>=1,users=human_reviewers":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review>=1,users=human_reviewers"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cce53d9d522a585269fa892c72a44ba04e1d0ce6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}