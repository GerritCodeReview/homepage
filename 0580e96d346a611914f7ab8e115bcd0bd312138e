{
  "comments": [
    {
      "key": {
        "uuid": "023537b5_e9e500fa",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-06-19T20:21:49Z",
      "side": 1,
      "message": "What advantage do we get by adding this data to a new file instead of adding it to the account.config file?",
      "range": {
        "startLine": 61,
        "startChar": 78,
        "endLine": 61,
        "endChar": 82
      },
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "243f9b90_cb7e0b8b",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T12:55:17Z",
      "side": 1,
      "message": "Basically, separation of concerns.\n\nOne could make the argument that you then need to read two files, but this is negligible given that the whole account info entity is cached and read from disk infrequently.",
      "parentUuid": "023537b5_e9e500fa",
      "range": {
        "startLine": 61,
        "startChar": 78,
        "endLine": 61,
        "endChar": 82
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "505f8f9d_08b54a10",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-08T14:55:18Z",
      "side": 1,
      "message": "Since it doesn\u0027s sound like there is a good reason to keep this data in a separate file, I think it would be more appropriate to put this in account.config. I suspect that if you do, you will eliminate the awkwardness or nee for the extra accountid keys that you are describing below.",
      "parentUuid": "243f9b90_cb7e0b8b",
      "range": {
        "startLine": 61,
        "startChar": 78,
        "endLine": 61,
        "endChar": 82
      },
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c5fab55_4bc9cce3",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T15:18:40Z",
      "side": 1,
      "message": "I don\u0027t mind much either way, it would be in line with the current structure though:\n\naccount.config - stores account metadata\npreference.config - stores preferences\n(new) external-ids.config - stores external IDs",
      "parentUuid": "505f8f9d_08b54a10",
      "range": {
        "startLine": 61,
        "startChar": 78,
        "endLine": 61,
        "endChar": 82
      },
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91f52b2f_004d147d",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-08T15:34:59Z",
      "side": 1,
      "message": "The \"external-ids\" separation feels artificial, I would say it is a remnant of the DB structure that we don\u0027t need to keep.  It feels like account data to me (very different from preferences).",
      "parentUuid": "6c5fab55_4bc9cce3",
      "range": {
        "startLine": 61,
        "startChar": 78,
        "endLine": 61,
        "endChar": 82
      },
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f801cbe0_50414a8e",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-06-19T20:21:49Z",
      "side": 1,
      "message": "Would this only even be the account that this ref is for?",
      "range": {
        "startLine": 64,
        "startChar": 20,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8226b11c_7c0088ec",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T12:55:17Z",
      "side": 1,
      "message": "Yes, as it stands, this doesn\u0027t look like it makes a lot of sense, but it separates the externald IDs with the key as subsection. This means that we can add key/value pairs easily in the future without a data migration.\n\nFrom [1] it wasn\u0027t obvious to me that one could omit all key/values in a subsection and still have a valid config file. Example\n\n[externalId \"\u003cexternal-id-key-1\u003e\"]\n[externalId \"\u003cexternal-id-key-2\u003e\"]\n\nIf that is the case in all relevant implementations (c-git and JGit) we can just omit the account ID.\n\nI\u0027ll check this before implementing it.\n\n[1] https://git-scm.com/docs/git-config#_syntax",
      "parentUuid": "f801cbe0_50414a8e",
      "range": {
        "startLine": 64,
        "startChar": 20,
        "endLine": 64,
        "endChar": 26
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1d77095_af65ae66",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-06-24T07:32:56Z",
      "side": 1,
      "message": "-2 ?",
      "range": {
        "startLine": 65,
        "startChar": 29,
        "endLine": 65,
        "endChar": 32
      },
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02e18edf_0aa2fe38",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T12:55:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1d77095_af65ae66",
      "range": {
        "startLine": 65,
        "startChar": 29,
        "endLine": 65,
        "endChar": 32
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40c0bd1a_6f64cf92",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-06-19T20:21:49Z",
      "side": 1,
      "message": "Maybe I don\u0027t fully understand what this data is. Is the data in these two entries intended to be different, or is only the external ID supposed to be different, and the accountId will be the same since it is all for the same account, the account the ref is for?",
      "range": {
        "startLine": 66,
        "startChar": 8,
        "endLine": 66,
        "endChar": 17
      },
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eff39131_e4a4d86b",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T12:55:17Z",
      "side": 1,
      "message": "The account ID would be the same, but it\u0027s essentially superfluous information.\n\nThe key of the subsection is the external ID.\n\nThis is essentially the same format as we have currently.",
      "parentUuid": "40c0bd1a_6f64cf92",
      "range": {
        "startLine": 66,
        "startChar": 8,
        "endLine": 66,
        "endChar": 17
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daaaac5f_db606a35",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-06-19T20:21:49Z",
      "side": 1,
      "message": "Would this be refs that have only an index of other primary data (that would be on the refs/users/uu/vvvvvuu refs)?",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c9d4d32_edfe4b95",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T12:55:17Z",
      "side": 1,
      "message": "I am not quite sure I understand the question:\n\nThese refs are an index for data in refs/users/uu/vvvvvuu, so that you can find this data faster.\n\nSo from an email or an external ID, you can go to refs/users/uu/vvvvvuu which contains the email/external ID and more by using these refs.",
      "parentUuid": "daaaac5f_db606a35",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "634ca5ef_8d9096d2",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-08T14:55:18Z",
      "side": 1,
      "message": "Sounds like the answer is \"yes\". We should only keep primary data in the git repos, index data belongs in our index.",
      "parentUuid": "3c9d4d32_edfe4b95",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09a35389_51b46da9",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T15:18:40Z",
      "side": 1,
      "message": "For external IDs, I disagree, for emails, I can see your point in part.\n\nWe need a way to authenticate a user even when the index subsystem is broken, down or stale. That means we need to to be able to resolve from ExternalID to Account.Id (and state) fast using only Git data.\nThe other strong reason is atomicity and staleness. For authenticating users, we can\u0027t afford any staleness for security reasons, so we have to leverage atomic ref updates. One could make an argument that after the index query we could do a cross-check of data and verify that the user that the index gave us really possesses the external ID we want to look up, but then, if that is not the case, there is no way but fail with a 500.\n\nAlso, we can\u0027t send a query to the index for every request because it is on the auth path because of latency.",
      "parentUuid": "634ca5ef_8d9096d2",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "307c7817_5fa61dcb",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T15:23:56Z",
      "side": 1,
      "message": "... I forgot one of the main arguments actually: ExternalIDs need to be unique which is best enforced in primary storage.",
      "parentUuid": "09a35389_51b46da9",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18c63664_c6b82bb5",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-08T15:34:59Z",
      "side": 1,
      "message": "\u003e We need a way to authenticate a user even when the index subsystem is broken, down or stale. That means we need to to be able to resolve from ExternalID to Account.Id (and state) fast using only Git data.\n\nIf the index system is broken, down, or stale then it would be appropriate for things to get slower.\n\n\u003e so we have to leverage atomic ref updates.\n\nI don\u0027t follow, what refs need to be updated atomically together? I am suggesting that there only be one ref, the account ref. Are there other refs that need to be updated when dealing with accounts besides these new ones that I am saying shouldn\u0027t be added?\n\n\u003e Also, we can\u0027t send a query to the index for every request because it is on the auth path because of latency\n\nIn the open source world, an index query tends to be lower latency than a git data lookup.\n\nIf you are working with a lot of google technology specific constraints and you are designing for them, I suggest that you specify some of this in your \"objective\" section to make it clearer to the open source reviewers. If you do, then I also suggest that you add an objective that states that you want to ensure that you do not degrade performance for the open source version of Gerrit.",
      "parentUuid": "09a35389_51b46da9",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "900326e3_33beb13f",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-08T15:38:53Z",
      "side": 1,
      "message": "\u003e I forgot one of the main arguments actually: ExternalIDs need to be unique which is best enforced in primary storage.\n\nUnfortunately these indexes do nothing to enforce this since anyone can update the user refs directly without updating these indexes.",
      "parentUuid": "18c63664_c6b82bb5",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "479088b7_e9cea2d1",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T15:55:58Z",
      "side": 1,
      "message": "\u003e If the index system is broken, down, or stale then it would be appropriate for things to get slower.\n\nThey wouldn\u0027t get slower, they would just not work or bring the task down entirely. If there is no backwards mapping because the index is down and there is no mapping in Git, we would need to read all account refs to find the account that the external ID belongs to which can take \u003e30s depending on how many accounts there are.\n\n\u003e I don\u0027t follow, what refs need to be updated atomically together?\n\nIf you want to add an external ID, the insert operation needs to be atomic in that it must ensure that this external ID did not previously exist and after the operation is associated with exactly one account. If you store the mapping of ExtId-\u003eAccount in an index and it is stale  (e.g. the record is missing) there is no way to ensure that. If this mapping is in Git, this is guaranteed by a BatchRefUpdate.\n\n\u003e If you do, then I also suggest that you add an objective that states that you want to ensure that you do not degrade performance for the open source version of Gerrit.\n\nCan you explain how performance would be degraded by this design with respect to what we currently have?\n\nFrom what I see, when we (for example) authenticate users with LDAP, we already read an external ID note from Git right now. This design would not change that with respect to disk reads.\n\nThis design even has the potential to improve performance over what we currently have for all auth paths if we implement the parts that are now marked as optional (\"AccountByExternalId\"). That would make it so that authentication happens completely in memory. (For completeness, the LDAP realm already has a cache built in which benefits the current system and this design equally, but it seems to never invalidate, so we better solve this differently).\n\nThe InternalAuthBackend by the way currently also does an uncached disk read (via AccountCache#getByUsername) when authenticating, so there we have another chance for improving what we currently have.",
      "parentUuid": "18c63664_c6b82bb5",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25dba9a4_24d0a102",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T15:57:22Z",
      "side": 1,
      "message": "\u003e Unfortunately these indexes do nothing to enforce this since anyone can update the user refs directly without updating these indexes.\n\nAn enforcer in ReceiveCommits will prevent that. So the only way to screw this up is admins mingling with the repo directly and not through Gerrit. You can make any system inconsistent if you mingle with the bytes (SQL tables, for that sake) directly.",
      "parentUuid": "479088b7_e9cea2d1",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e59e4efe_ff6d9be2",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-07-08T16:57:56Z",
      "side": 1,
      "message": "I think I understand what you are concerned with. What I am hearing is that these \"indexes\" are not for speed, but rather for data consistency, for primary key enforcement? I suggest updating the doc to reflect this intent since it currently says: \"We add two new refs with NotesMaps that allow fast lookups of accounts by primary email and by external ID\".\n\nIt might make more sense to use a single ref as the primary key enforcement mechanism since it would result in fewer refs. Both approaches would work with BatchRefUpdate, and both would take the performance hit this would entail (rewriting the entire packed refs file). Using a single ref would reduce the overall ref count dramatically and affect most unrelated repo reads a lot less. A single ref might also be more inline with the way we have a single ref to enforce change number uniqueness? If you are then concerned that having a single ref would be slow for externalid reads, I would suggest that an index is more appropriate to speed those up, and in the open source world this might be faster than reading a git ref.",
      "parentUuid": "25dba9a4_24d0a102",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d07f2a5f_550e1ea4",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-06-19T16:45:46Z",
      "side": 1,
      "message": "retrieve",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 176,
        "endChar": 7
      },
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6373021_f8b8dd88",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T12:55:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d07f2a5f_550e1ea4",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 176,
        "endChar": 7
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "450c48b5_17b15591",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-06-19T20:21:49Z",
      "side": 1,
      "message": "I think you mean on aggregate, I sure hope no individual user is spending this amount of time waiting? I suggest this be made clearer.",
      "range": {
        "startLine": 194,
        "startChar": 77,
        "endLine": 194,
        "endChar": 110
      },
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ece8db5e_8eabf45a",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T12:55:17Z",
      "side": 1,
      "message": "Done :-)",
      "parentUuid": "450c48b5_17b15591",
      "range": {
        "startLine": 194,
        "startChar": 77,
        "endLine": 194,
        "endChar": 110
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6d6aae4_6c854bc1",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-06-19T16:31:25Z",
      "side": 1,
      "message": "I thought it was also not wired up for use with Gerrit. Or did we fix that?",
      "range": {
        "startLine": 212,
        "startChar": 1,
        "endLine": 212,
        "endChar": 60
      },
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c6564e6_140fdf0b",
        "filename": "pages/design-docs/external-id-storage-revamp/doc.md",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-07-08T12:55:17Z",
      "side": 1,
      "message": "C-Git has no implementation and open-source admins are using c-Git to debug or as a last resort if Gerrit is in a broken state, so All-Users currently can\u0027t move to use RefTable.",
      "parentUuid": "d6d6aae4_6c854bc1",
      "range": {
        "startLine": 212,
        "startChar": 1,
        "endLine": 212,
        "endChar": 60
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "0580e96d346a611914f7ab8e115bcd0bd312138e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}