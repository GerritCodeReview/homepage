{
  "comments": [
    {
      "key": {
        "uuid": "cedc2b2a_35338e45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-08-21T09:43:34Z",
      "side": 1,
      "message": "I don\u0027t quite understand the connection between SubmitPredicate and SubmitRequirement.\nIs it that \"a SubmitPredicate is a SubmitRequirement\" or \"a SubmitRequirement evaluates a SubmitPredicate\" or something entirely different?",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca836038_119c6a1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-21T10:42:57Z",
      "side": 1,
      "message": "A SubmitRequirement is the entity that has a name, description and three queries (applicable, blocking, override).\n\nEach query is made out of submit predicates and boolean operators (NOT branch:master).\n\nHappy to reword this to make it more clear.",
      "parentUuid": "cedc2b2a_35338e45",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c502de3_a3185eba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-08-21T11:27:14Z",
      "side": 1,
      "message": "FWICT from the document the new SubmitPredicate interface should be very similar to the SubmitRule interface and replace the latter.\n\nAs an example (with the risk of me having misunderstood things completely):\n\nWe have a plugin that allows users to choose whether a tag should be created when the change i merged and how the tag should be incremented based on an already existing tag.\n\nCurrently you can configure the plugin to disallow submit if no selection has been done, this is currently implemented through a MergeValidator.\nSince our CI system needs to now if the change is submitable we will rewrite it as a SubmitRule.\nWhat we will have then (hopefully) is a plugin that you can configure so that a selection is required for submit, and this is reflected in ChangeInfo.submitable\n\n    [auto-tagger \"master\"]\n       required \u003d true\n        \nWhen this solution is implemented is this still true or will we have to keep the submit-requirements for this plugin in a separate configuration?",
      "parentUuid": "ca836038_119c6a1f",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80877cc5_645b8c03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-21T11:45:07Z",
      "side": 1,
      "message": "\u003e FWICT from the document the new SubmitPredicate interface should be very similar to the SubmitRule interface and replace the latter.\n\nExactly.\n\nInteresting use case. How does the selection work and what exactly is a tag? (git rag? hashtag? commit footer?)",
      "parentUuid": "2c502de3_a3185eba",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "969d062f_1fec04b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-08-21T13:24:19Z",
      "side": 1,
      "message": "\u003e \u003e FWICT from the document the new SubmitPredicate interface should be very similar to the SubmitRule interface and replace the latter.\n\u003e \n\u003e Exactly.\n\nSo implementing SubmitPredicate is enough, no further configuration is needed?\n\n\u003e \n\u003e Interesting use case. How does the selection work and what exactly is a tag? (git rag? hashtag? commit footer?)\n\nthe gist of it:\n\nSets a git tag on the merge-result (or latest-patchset for the non-tip changes of a merged stack).\nConfigurable per branch which pattern the tag should have and a drop-down on the change-screen that shows the different selections and what the resulting tag would be:\n{} is an integer placeholder\n\n    [auto-tagger \"master\"]\n      pattern \u003d R{}.{}.{}\n\nCurrent \"highest\" tag matching pattern: R3.4.6\nSelections:\n- No selection (Default)\n- No tag\n- R{}.{}.{x} -\u003e R3.4.7\n- R{}.{x}.{} -\u003e R3.5.0\n- R{x}.{}.{} -\u003e R4.0.0\n\nSome projects have the requirement that a selection must be made before merge (\"No Tag\" being a valid selection), hence my interest.",
      "parentUuid": "80877cc5_645b8c03",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9db63075_a8314254",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-21T13:37:08Z",
      "side": 1,
      "message": "\u003e So implementing SubmitPredicate is enough, no further configuration is needed?\n\nYou would implement a \"TagSelectionPredicate implements SubmitPredicate\" and configure a submit rule (in project.config or via the UI) that has:\n\nname: Tag selection made\ndescription: This requirement makes sure that a choice was made as to which Git tag should be created when this change gets submitted. Please make a choice using the \u0027Tag\u0027 dropdown on the top right.\napplicable_condition: branch:master (or whenever you want this to apply at all, can also just be empty which means \u0027is:true\u0027)\nblocking: has:tag-selection\n\nDepending on how you store the selection that is made in the drop down you have on the change screen, you might even be getting away without implementing a custom SubmitPredicate. For example, if you were to store the selection as a git footer, you could say \u0027has-footer:\u003cregex\u003e\u0027. But in this case, implementing the logic as a custom predicate sounds like a clean and simple solution to me and it means you are free to adapt this to your current workflow.\n\nYour specific case would already work today with the SubmitRules interface and work in this new world as well. In this specific case, the new world has the advantage that some of the configs (e.g. when to apply) can move to the applicable condition and override condition instead of requiring you to implement that as well (though, you could, if you wanted).",
      "parentUuid": "969d062f_1fec04b6",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5085f89b_91accca3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-08-21T14:35:44Z",
      "side": 1,
      "message": "I think the idea of a SubmitPredicate interface so that plugins can interpret submit-requirements that lay outside of core Gerrit\u0027s realm of interest.\n\nBut from my point of view a SubmitRule is more equivalent to a SubmitRequirement, could we also expose an API for plugins to contribute SubmitRequirements directly?\n\n\u003e \u003e So implementing SubmitPredicate is enough, no further configuration is needed?\n\u003e \n\u003e You would implement a \"TagSelectionPredicate implements SubmitPredicate\" and configure a submit rule (in project.config or via the UI) that has:\n\u003e \n\u003e name: Tag selection made\n\u003e description: This requirement makes sure that a choice was made as to which Git tag should be created when this change gets submitted. Please make a choice using the \u0027Tag\u0027 dropdown on the top right.\n\u003e applicable_condition: branch:master (or whenever you want this to apply at all, can also just be empty which means \u0027is:true\u0027)\n\u003e blocking: has:tag-selection\n\nThis is what I meant by: \"a SubmitRequirement evaluates a SubmitPredicate\".\n\n\u003e \n\u003e Depending on how you store the selection that is made in the drop down you have on the change screen, you might even be getting away without implementing a custom SubmitPredicate. For example, if you were to store the selection as a git footer, you could say \u0027has-footer:\u003cregex\u003e\u0027. But in this case, implementing the logic as a custom predicate sounds like a clean and simple solution to me and it means you are free to adapt this to your current workflow.\n\nThe selection is stored in {CHANGE_REF}/autotagger/meta.\n\n\u003e \n\u003e Your specific case would already work today with the SubmitRules interface and work in this new world as well. In this specific case, the new world has the advantage that some of the configs (e.g. when to apply) can move to the applicable condition and override condition instead of requiring you to implement that as well (though, you could, if you wanted).\n\nIn my particular use-case (which in no way is representative to the entire world) I  see some draw-backs compared to SubmitRule.\nATM our users can simply mark a tag-setting as required:\n\n    [autotagger \"master]\n      pattern \u003d R{}.{}.{}\n      required \u003d true\n\nIn the new-world they would have to configure the submit-requirement separately (which opens the door for human errors, misunderstandings and complication) and there\u0027s an implicit dependency between the configured branch and the \"branch:\" predicate:\n\n    [autotagger \"master]\n      pattern \u003d R{}.{}.{}\n\n    [SubmitRequirement \"tag-selection\"]\n      name \u003d Tag selection made\n      description \u003d This...\n      blocking \u003d branch: master AND has:tag-selection\n\nWith that being said, by-and-large having one single way to express submit-requirements has it\u0027s benefits and once it is \"accepted\" by users the latter example might even be more descriptive than the former...",
      "parentUuid": "9db63075_a8314254",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0633665_5b8452c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T09:26:54Z",
      "side": 1,
      "message": "Thanks for the comments so far, I\u0027ll upload a new revision today to factor them in!",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d06023b_829b9d7f",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-08-21T14:31:26Z",
      "side": 1,
      "message": "In practice, at current state, one has to also set LabelFunction.NO_BLOCK for label so that DefaultSubmitRule doesn\u0027t contribute to the Submitability ;)",
      "range": {
        "startLine": 29,
        "startChar": 44,
        "endLine": 29,
        "endChar": 71
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "915bcea1_c922470b",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T09:26:54Z",
      "side": 1,
      "message": "Correct (true for labels only, though. Some SRs are completely independent of labels and yet they need full, custom configuration on their own)",
      "parentUuid": "2d06023b_829b9d7f",
      "range": {
        "startLine": 29,
        "startChar": 44,
        "endLine": 29,
        "endChar": 71
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "caa35549_6dcae3a1",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-08-21T14:31:26Z",
      "side": 1,
      "message": "nit: s/SubmitRules/SubmitRule/",
      "range": {
        "startLine": 54,
        "startChar": 58,
        "endLine": 54,
        "endChar": 69
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6d29367_d968895a",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T13:10:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "caa35549_6dcae3a1",
      "range": {
        "startLine": 54,
        "startChar": 58,
        "endLine": 54,
        "endChar": 69
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a4de119_34dd0ab9",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-08-21T14:31:26Z",
      "side": 1,
      "message": "nit: s/SubmitPredicates/SubmitPredicate/",
      "range": {
        "startLine": 57,
        "startChar": 36,
        "endLine": 57,
        "endChar": 52
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4889e086_97f39f7b",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T13:10:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a4de119_34dd0ab9",
      "range": {
        "startLine": 57,
        "startChar": 36,
        "endLine": 57,
        "endChar": 52
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c5fb45b_b6a96650",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-08-21T14:31:26Z",
      "side": 1,
      "message": "nit: s/SubmitPredicates/SubmitPredicate/",
      "range": {
        "startLine": 58,
        "startChar": 36,
        "endLine": 58,
        "endChar": 52
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5dbc8b06_2c690bb6",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T13:10:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c5fb45b_b6a96650",
      "range": {
        "startLine": 58,
        "startChar": 36,
        "endLine": 58,
        "endChar": 52
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d25d2245_e4cebdcd",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1074328
      },
      "writtenOn": "2020-08-21T11:45:03Z",
      "side": 1,
      "message": "Nit: three?",
      "range": {
        "startLine": 62,
        "startChar": 25,
        "endLine": 62,
        "endChar": 28
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c248fad_8a019a60",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T13:10:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d25d2245_e4cebdcd",
      "range": {
        "startLine": 62,
        "startChar": 25,
        "endLine": 62,
        "endChar": 28
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60d861cb_6da8669d",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-08-21T14:40:25Z",
      "side": 1,
      "message": "Am I understanding this correctly? Is this not supported?\n\n    (branch: master OR branch: stable-3.2) AND has:my-requirement",
      "range": {
        "startLine": 65,
        "startChar": 44,
        "endLine": 66,
        "endChar": 12
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbb509cd_483eccae",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-08-24T08:50:00Z",
      "side": 1,
      "message": "Maybe it could be supported with predefined SubmitRequirements (e.g. OR and AND) so that we could ditch the whole prolog altogether ;) another option (IIUIC) would be to cover the whole condition in SubmitRequest...",
      "parentUuid": "60d861cb_6da8669d",
      "range": {
        "startLine": 65,
        "startChar": 44,
        "endLine": 66,
        "endChar": 12
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6d2d2af_08107a57",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-08-24T09:05:33Z",
      "side": 1,
      "message": "I think I was misunderstanding. It should be:\n\n    applicable \u003d branch: master OR branch:stable-3.2\n    blocking \u003d NOT has:my-requirement",
      "parentUuid": "bbb509cd_483eccae",
      "range": {
        "startLine": 65,
        "startChar": 44,
        "endLine": 66,
        "endChar": 12
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36913351_42087a14",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T09:26:54Z",
      "side": 1,
      "message": "This is supported (both of your comments). The second one is more in the spirit of this design :-)\n\nWhat is not supported is:\n\nvar myVariable \u003d 123\nbranch:myVariable\n\n(variables)\n\nand\n\npredicate1(predicate2, predicate3)\n\n(nesting)\n\nWhich I think is obvious given how queries work, but I wanted to call it out anyway.",
      "parentUuid": "60d861cb_6da8669d",
      "range": {
        "startLine": 65,
        "startChar": 44,
        "endLine": 66,
        "endChar": 12
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce8ce322_489368ea",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-08-24T09:54:17Z",
      "side": 1,
      "message": "\u003e \n\u003e Which I think is obvious given how queries work, but I wanted to call it out anyway.\n\nThat\u0027s what confused me, I didn\u0027t understand the limitations in context of the implicit limitation \"It needs to be a valid query\" 😊",
      "parentUuid": "36913351_42087a14",
      "range": {
        "startLine": 65,
        "startChar": 44,
        "endLine": 66,
        "endChar": 12
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da17af06_eb7ab6a8",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T13:10:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce8ce322_489368ea",
      "range": {
        "startLine": 65,
        "startChar": 44,
        "endLine": 66,
        "endChar": 12
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbba4cc8_274f6331",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-08-24T15:06:00Z",
      "side": 1,
      "message": "I think this is what it means, but to confirm, does this no nesting support mean we can\u0027t do things like what the task plugin does with \u0027subtasks\u0027? https://gerrit.googlesource.com/plugins/task/+/refs/heads/master/src/main/resources/Documentation/task.md",
      "parentUuid": "da17af06_eb7ab6a8",
      "range": {
        "startLine": 65,
        "startChar": 44,
        "endLine": 66,
        "endChar": 12
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6291f7f0_ce0b0ce4",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-08-24T09:54:17Z",
      "side": 1,
      "message": "Would \u0027required_condition\u0027 be more natural?\n\n    // Query, that if it evaluates to false will block submission.\n\nI think the term \u0027blocking\u0027 is at odds with the name SubmitRequirement which plays a trick on the mind.\nI had to think for a couple of seconds extra to get it right and your own example code in reply below:\n\n    applicable: branch:master\n    blocking: is:all-comments-resolved\n\nBlock submit if all comments are resolved?",
      "range": {
        "startLine": 76,
        "startChar": 2,
        "endLine": 76,
        "endChar": 28
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b52f4d90_809cb3b2",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T13:10:53Z",
      "side": 1,
      "message": "It would be:\n\nblocking: NOT is:all-comments-resolved\n\nI don\u0027t have strong feelings about the naming here, it just has to be consistent. You might be right in that we\u0027d rather expect that when the query evaluates to \u0027true\u0027 that makes the change submittable. That matches override (if true then overridden, hence submittable).\n\nMaybe we should change override to overridden so that this reads consistently:\napplicable (if): branch:master\nfulfilled (if): is:all-comments-resolved\n\nI think that\u0027d be more natural also when expressing single label votes:\n\nfulfilled: label:Code-Review+2",
      "parentUuid": "6291f7f0_ce0b0ce4",
      "range": {
        "startLine": 76,
        "startChar": 2,
        "endLine": 76,
        "endChar": 28
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96f08bc8_ea77a709",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-08-24T13:55:33Z",
      "side": 1,
      "message": "\u003e It would be:\n\u003e \n\u003e blocking: NOT is:all-comments-resolved\n\nMy point was that it seems like you (same as I) instinctively interpreted this as a required condition not a blocking condition.\n\u003e \n\u003e I don\u0027t have strong feelings about the naming here, it just has to be consistent. You might be right in that we\u0027d rather expect that when the query evaluates to \u0027true\u0027 that makes the change submittable. That matches override (if true then overridden, hence submittable).\n\u003e \n\u003e Maybe we should change override to overridden so that this reads consistently:\n\u003e applicable (if): branch:master\n\u003e fulfilled (if): is:all-comments-resolved\n\nI don\u0027t have any strong opinions about the exact names, an implicit if/when works for me if making them explicit is too chatty (IMO it\u0027s really easy to understand, but either way works).\n\n    applicable_when \u003d branch:master\n    fulfilled_when \u003d label:Code-Review+2\n    overridden_when \u003d has:superpowers \n\n\u003e \n\u003e I think that\u0027d be more natural also when expressing single label votes:\n\u003e \n\u003e fulfilled: label:Code-Review+2",
      "parentUuid": "b52f4d90_809cb3b2",
      "range": {
        "startLine": 76,
        "startChar": 2,
        "endLine": 76,
        "endChar": 28
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f73b5a06_0a0cc82b",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-08-24T15:06:00Z",
      "side": 1,
      "message": "If we want to steal a bit of naming from the task plugin, you could look at what it uses. It already has \u0027applicable\u0027, but then allows for \u0027pass\u0027, \u0027fail\u0027, and \u0027in-progress\u0027 queries to be defined: https://gerrit.googlesource.com/plugins/task/+/refs/heads/master/src/main/resources/Documentation/task.md\n\nIt also has the concept of \"hints\", which are used as a user explanation for the state (i.e. why is it failing or what\u0027s next for something ready).",
      "parentUuid": "96f08bc8_ea77a709",
      "range": {
        "startLine": 76,
        "startChar": 2,
        "endLine": 76,
        "endChar": 28
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67294e9f_5d532c60",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-08-21T14:31:26Z",
      "side": 1,
      "message": "+1",
      "range": {
        "startLine": 93,
        "startChar": 33,
        "endLine": 94,
        "endChar": 33
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f652e3da_ec087bc2",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T13:10:53Z",
      "side": 1,
      "message": ":-)",
      "parentUuid": "67294e9f_5d532c60",
      "range": {
        "startLine": 93,
        "startChar": 33,
        "endLine": 94,
        "endChar": 33
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e35abb3f_fc4dfcf9",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-08-21T14:31:26Z",
      "side": 1,
      "message": "nit: s/Application/Applicable/",
      "range": {
        "startLine": 101,
        "startChar": 1,
        "endLine": 101,
        "endChar": 13
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "744806a9_4786842c",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T13:10:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e35abb3f_fc4dfcf9",
      "range": {
        "startLine": 101,
        "startChar": 1,
        "endLine": 101,
        "endChar": 13
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a46383a0_5a69c905",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-08-21T14:31:26Z",
      "side": 1,
      "message": "IOW \u0027MAX_WITH_BLOCK\u0027 is a SubmitPredicate, that can be contributed by plugins, right?",
      "range": {
        "startLine": 120,
        "startChar": 21,
        "endLine": 120,
        "endChar": 35
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eff76b57_1b375ce2",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T13:10:53Z",
      "side": 1,
      "message": "In this example, it\u0027s a label function (actually, an already existing one), so it\u0027s core functionality.\n\nI added an example for a plugin predicate as well.",
      "parentUuid": "a46383a0_5a69c905",
      "range": {
        "startLine": 120,
        "startChar": 21,
        "endLine": 120,
        "endChar": 35
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3375acc4_35a9d39a",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 227,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2020-08-21T14:31:26Z",
      "side": 1,
      "message": "not really - one of the Prolog benefits is a possibility to determine if given Rule applies to the change or not e.g. Require Lawyers group member to give +1 only when licence files are modified, etc...",
      "range": {
        "startLine": 226,
        "startChar": 33,
        "endLine": 227,
        "endChar": 34
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecf31f5d_30b6e6d4",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 227,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-24T09:26:54Z",
      "side": 1,
      "message": "You could do that in a single query if you\u0027re OK giving up the state distinction of \"passing vs not applicable\".\n\nSo:\n\napplicable: branch:master\nblocking: is:all-comments-resolved\n\ncould translate to:\n\nblocking: (NOT branch:master) OR is:all-comments-resolved\n\nBut it would make the UX worse as I think the user doesn\u0027t really care about irrelevant requirements and would rather not have them mentioned as \"passing\".",
      "parentUuid": "3375acc4_35a9d39a",
      "range": {
        "startLine": 226,
        "startChar": 33,
        "endLine": 227,
        "endChar": 34
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}