{
  "comments": [
    {
      "key": {
        "uuid": "cedc2b2a_35338e45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-08-21T09:43:34Z",
      "side": 1,
      "message": "I don\u0027t quite understand the connection between SubmitPredicate and SubmitRequirement.\nIs it that \"a SubmitPredicate is a SubmitRequirement\" or \"a SubmitRequirement evaluates a SubmitPredicate\" or something entirely different?",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca836038_119c6a1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-21T10:42:57Z",
      "side": 1,
      "message": "A SubmitRequirement is the entity that has a name, description and three queries (applicable, blocking, override).\n\nEach query is made out of submit predicates and boolean operators (NOT branch:master).\n\nHappy to reword this to make it more clear.",
      "parentUuid": "cedc2b2a_35338e45",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c502de3_a3185eba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-08-21T11:27:14Z",
      "side": 1,
      "message": "FWICT from the document the new SubmitPredicate interface should be very similar to the SubmitRule interface and replace the latter.\n\nAs an example (with the risk of me having misunderstood things completely):\n\nWe have a plugin that allows users to choose whether a tag should be created when the change i merged and how the tag should be incremented based on an already existing tag.\n\nCurrently you can configure the plugin to disallow submit if no selection has been done, this is currently implemented through a MergeValidator.\nSince our CI system needs to now if the change is submitable we will rewrite it as a SubmitRule.\nWhat we will have then (hopefully) is a plugin that you can configure so that a selection is required for submit, and this is reflected in ChangeInfo.submitable\n\n    [auto-tagger \"master\"]\n       required \u003d true\n        \nWhen this solution is implemented is this still true or will we have to keep the submit-requirements for this plugin in a separate configuration?",
      "parentUuid": "ca836038_119c6a1f",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80877cc5_645b8c03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-21T11:45:07Z",
      "side": 1,
      "message": "\u003e FWICT from the document the new SubmitPredicate interface should be very similar to the SubmitRule interface and replace the latter.\n\nExactly.\n\nInteresting use case. How does the selection work and what exactly is a tag? (git rag? hashtag? commit footer?)",
      "parentUuid": "2c502de3_a3185eba",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "969d062f_1fec04b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-08-21T13:24:19Z",
      "side": 1,
      "message": "\u003e \u003e FWICT from the document the new SubmitPredicate interface should be very similar to the SubmitRule interface and replace the latter.\n\u003e \n\u003e Exactly.\n\nSo implementing SubmitPredicate is enough, no further configuration is needed?\n\n\u003e \n\u003e Interesting use case. How does the selection work and what exactly is a tag? (git rag? hashtag? commit footer?)\n\nthe gist of it:\n\nSets a git tag on the merge-result (or latest-patchset for the non-tip changes of a merged stack).\nConfigurable per branch which pattern the tag should have and a drop-down on the change-screen that shows the different selections and what the resulting tag would be:\n{} is an integer placeholder\n\n    [auto-tagger \"master\"]\n      pattern \u003d R{}.{}.{}\n\nCurrent \"highest\" tag matching pattern: R3.4.6\nSelections:\n- No selection (Default)\n- No tag\n- R{}.{}.{x} -\u003e R3.4.7\n- R{}.{x}.{} -\u003e R3.5.0\n- R{x}.{}.{} -\u003e R4.0.0\n\nSome projects have the requirement that a selection must be made before merge (\"No Tag\" being a valid selection), hence my interest.",
      "parentUuid": "80877cc5_645b8c03",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9db63075_a8314254",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-21T13:37:08Z",
      "side": 1,
      "message": "\u003e So implementing SubmitPredicate is enough, no further configuration is needed?\n\nYou would implement a \"TagSelectionPredicate implements SubmitPredicate\" and configure a submit rule (in project.config or via the UI) that has:\n\nname: Tag selection made\ndescription: This requirement makes sure that a choice was made as to which Git tag should be created when this change gets submitted. Please make a choice using the \u0027Tag\u0027 dropdown on the top right.\napplicable_condition: branch:master (or whenever you want this to apply at all, can also just be empty which means \u0027is:true\u0027)\nblocking: has:tag-selection\n\nDepending on how you store the selection that is made in the drop down you have on the change screen, you might even be getting away without implementing a custom SubmitPredicate. For example, if you were to store the selection as a git footer, you could say \u0027has-footer:\u003cregex\u003e\u0027. But in this case, implementing the logic as a custom predicate sounds like a clean and simple solution to me and it means you are free to adapt this to your current workflow.\n\nYour specific case would already work today with the SubmitRules interface and work in this new world as well. In this specific case, the new world has the advantage that some of the configs (e.g. when to apply) can move to the applicable condition and override condition instead of requiring you to implement that as well (though, you could, if you wanted).",
      "parentUuid": "969d062f_1fec04b6",
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d25d2245_e4cebdcd",
        "filename": "pages/design-docs/ci-reboot/solution-composable-submit-requirements.md",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1074328
      },
      "writtenOn": "2020-08-21T11:45:03Z",
      "side": 1,
      "message": "Nit: three?",
      "range": {
        "startLine": 62,
        "startChar": 25,
        "endLine": 62,
        "endChar": 28
      },
      "revId": "761cd1ed97083e2727d88b3eb95c2ee25c6dc6ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}