{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7da4afe3_7c40c55e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-04-27T06:35:17Z",
      "side": 1,
      "message": "Submitting this, as I think the solution is well-enough described, including the pros \u0026 cons. Submitting this doesn\u0027t mean that this solution is accepted and will be implemented (the conclusion is done via the conclusion.md doc that\u0027s yet to be added, see [1]). Also further iterative improvements to this solution are possible.\n\n[1] https://gerrit-review.googlesource.com/Documentation/dev-design-docs.html",
      "revId": "ff2bbaca0f5c830c533b573bd2d5f0eedfe1f71c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bea10c87_24527325",
        "filename": "pages/design-docs/push-reviews/solution-google-2.md",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-04-27T08:50:28Z",
      "side": 1,
      "message": "This solution is not feasible. If you store the old SHA1 in the metadata, then after submitting the change (ie. effecting the ref update), the old SHA1 is no longer reachable through the normal refs. This means that the old data will not be fetchable, and it will be pruned/garbage collected on the next GC run.",
      "range": {
        "startLine": 67,
        "startChar": 13,
        "endLine": 67,
        "endChar": 18
      },
      "revId": "ff2bbaca0f5c830c533b573bd2d5f0eedfe1f71c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46ff9dae_e3001763",
        "filename": "pages/design-docs/push-reviews/solution-google-2.md",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2022-04-27T09:19:36Z",
      "side": 1,
      "message": "indeed, it would be necessary to keep a reflog-like structure, say refs/archived_heads/master_\u003cchange-number\u003e.\n\nnote that this would be no worry for any commits which have an associated gerrit change, as a patchset (supposedly) exists under refs/changes/ for every integrated commit.",
      "parentUuid": "bea10c87_24527325",
      "range": {
        "startLine": 67,
        "startChar": 13,
        "endLine": 67,
        "endChar": 18
      },
      "revId": "ff2bbaca0f5c830c533b573bd2d5f0eedfe1f71c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57b2b980_4fb5dc43",
        "filename": "pages/design-docs/push-reviews/solution-google-2.md",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-04-27T09:34:49Z",
      "side": 1,
      "message": "\u003e This solution is not feasible.\n\nI think you are having an important point here, but I\u0027m not sure yet whether it makes this solution impossible (maybe it can be adapted?).\n\n\u003e If you store the old SHA1 in the metadata, \n\nWhat if instead we store the old SHA1 in a new refs/changes/\u003csharded-change-id\u003e/base ref?\n\n\u003e then after submitting the change (ie. effecting the ref update),\n\u003e the old SHA1 is no longer reachable through the normal refs. \n\nWhat do you mean by \"normal refs\", I assume branch refs under \"refs/heads/\"?\nIsn\u0027t this the same with the other solution? Also there the branch is (re)set to the exact commit that was pushed and hence the old SHA1 is no longer reachable from the branch history.\n\nIt\u0027s reachable only through the change ref which points to the merge commit (which has the old SHA1 as the first parent). This makes we wonder if we would need to disallow change deletion for push review changes after submission?\n\n\u003e This means that the old data will not be fetchable,\n\nIf this a requirement do we need to rephrase the acceptance criteria for this?\nIt currently says:\n\n\"The previous state of the branch is preserved for audit in the code review, so that users can inspect retroactively how the branch was changed.\"\n\nI think this is fulfilled by both solutions, as in both cases you can look at the merged push review change and see what was changed.\n\nDoes the old SHA1 need to be fetchable? If yes, strictly speaking this is not the case with the other solution as well, since you can only fetch the merge commit, but not directly the old SHA1 itself.\n\nIf we would add a refs/changes/\u003csharded-change-id\u003e/base ref (as suggested above) that would actually make the old SHA1 directly fetchable with this solution.\n\n\u003e and it will be pruned/garbage collected on the next GC run.\n\nI don\u0027t think this will happen since the old SHA1 is still referenced from the reflog which prevents GC.",
      "parentUuid": "bea10c87_24527325",
      "range": {
        "startLine": 67,
        "startChar": 13,
        "endLine": 67,
        "endChar": 18
      },
      "revId": "ff2bbaca0f5c830c533b573bd2d5f0eedfe1f71c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21c2a856_d09e8856",
        "filename": "pages/design-docs/push-reviews/solution-google-2.md",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-04-27T10:06:15Z",
      "side": 1,
      "message": "\u003eIsn\u0027t this the same with the other solution? Also there the branch is (re)set to the exact commit that was pushed and hence the old SHA1 is no longer reachable from the branch history.\n\nThe patchset refs will keep the old commits reachable.\n\n\u003eWhat if instead we store the old SHA1 in a new refs/changes/\u003csharded-change-id\u003e/base ref?\n\nThat could work, but it makes the storage scheme more complicated. If you do this, do you still keep the SHA1 in the metadata, and if so will it need to be synchronized? If not, under which circumstance do we need to read the extra ref?\n\n\u003eI don\u0027t think this will happen since the old SHA1 is still referenced from the reflog which prevents GC.\n\nreflogs commonly have a limited lifetime.",
      "parentUuid": "57b2b980_4fb5dc43",
      "range": {
        "startLine": 67,
        "startChar": 13,
        "endLine": 67,
        "endChar": 18
      },
      "revId": "ff2bbaca0f5c830c533b573bd2d5f0eedfe1f71c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3a1095b_42fbf7df",
        "filename": "pages/design-docs/push-reviews/solution-google-2.md",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-04-27T10:20:14Z",
      "side": 1,
      "message": "\u003e That could work, but it makes the storage scheme more complicated. \n\nYes, this would need to be mentioned in the \"cons\" section and could be a reason to discard this solution.\n\n\u003e If you do this, do you still keep the SHA1 in the metadata, and\n\u003e if so will it need to be synchronized? If not, under which circumstance\n\u003e do we need to read the extra ref?\n\nWith the new refs/changes/\u003csharded-change-id\u003e/base ref the base commit would not be stored in the change metadata then. We would need to read the extra ref whenever the change meta ref is read. For performance reasons we may want to have a flag in the change metadata to identify a change as a push review, so that we need to look for base ref only for push review changes (and not all changes).",
      "parentUuid": "21c2a856_d09e8856",
      "range": {
        "startLine": 67,
        "startChar": 13,
        "endLine": 67,
        "endChar": 18
      },
      "revId": "ff2bbaca0f5c830c533b573bd2d5f0eedfe1f71c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ff2bbaca0f5c830c533b573bd2d5f0eedfe1f71c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "ff2bbaca0f5c830c533b573bd2d5f0eedfe1f71c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ff2bbaca0f5c830c533b573bd2d5f0eedfe1f71c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}