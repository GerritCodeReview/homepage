{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "939fa0b1_acf58789",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Needed to share their CL. Prevents broken services, missing Guice bindings...",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6c6f533_95741370",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-04-01T06:30:25Z",
      "side": 1,
      "message": "Can there be a cyclic dependency problem which will prevent any plugin from loading ..?\n\neg: plugin-A-private dependson plugin-B-public which in turn dependson plugin-c-public which in turn dependson plugin-A-public which in turn dependson plugin-A-private.",
      "parentUuid": "939fa0b1_acf58789",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77f965d7_f97616ec",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Prevents broken services. Allow Class definitions from the CLs of their dependencies to be GCed.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d95ec004_e5e8093e",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Allows for repeating scheduled background tasks (examples: WebSessions/Batch cleaners)",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67d61556_f4bf5dc0",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Allows non breaking updates(bugfixes) to both APIs and implementations.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ae53b65_7210f113",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Simplifies administrators jobs. Avoids plugin jar file proliferation.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b8f7532_4debff63",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Avoid collisions when an implementation wants to name itself after the API it implements.",
      "range": {
        "startLine": 94,
        "startChar": 61,
        "endLine": 94,
        "endChar": 62
      },
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "258668bf_96f36f86",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Simplifies the admins job.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1078bd6f_9d73b691",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-04-01T06:30:25Z",
      "side": 1,
      "message": "so when a request is made to unload depends-on-main plugin, then depends-on-public subplugin will also be unloaded. Before unloading depends-on-public subplugin it needs to unload all the other subplugins which are depending on depends-on-public, such as pd-private subplugin. right?",
      "parentUuid": "258668bf_96f36f86",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "846ebc23_297a9347",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Allows developers to make admins job easy since the devs have this knowledge.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23aa91ba_a3efc4bd",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-04-01T06:30:25Z",
      "side": 1,
      "message": "s/legel/level/",
      "range": {
        "startLine": 103,
        "startChar": 67,
        "endLine": 103,
        "endChar": 72
      },
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eadc3191_bcce00ad",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "When sharing is needed Public dependencies make the most sense, however when sharing is not needed, such as when a plugin depends on another top level plugin\u0027s REST-API, main plugin dependencies should be used instead.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f95f8e4d_377c5f80",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Allows intra plugin sharing, including between public plugins. A plugin may have two independent public plugins which both need to use class FOO. Sharing a private plugin where FOO is defined allows them both to use FOO in their APIs and allows a third plugin to use both APIs without having a casting problem between the FOO from the first API and the FOO from the second API.\n\nTop level \"foo\" plugin includes the following sub-plugins:\n\n foo-private-types:    public class Foo {...}\n foo-public-producer:  public Foo getFoo(String branch)\n foo-public-consumer:  public void useProject(Foo foo)\n\nplugin \"bar\" needs to get a Foo from one API and use it in another API, like this:\n\n fooConsumer.useProject(fooProducer.getFoo(branch));\n\nhowever, that is only legal if the Foo used both foo-public-producer and foo-public-consumer is the same object defined in the same CL. This will be the case if \nfoo-private-types\u0027s CL is a parent CL to both public plugins.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05c3fc01_e5c8cf24",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Provides the flexibility to only share when needed.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2276041_fe822daa",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-04-01T06:30:25Z",
      "side": 1,
      "message": "unable to understand this sentence.",
      "range": {
        "startLine": 116,
        "startChar": 19,
        "endLine": 117,
        "endChar": 18
      },
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46297e2a_0a202044",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Makes the desire to share explicit.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "877e438c_e1fe6926",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Prevents sharing beyond explicitly allowed sharing.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bca28460_f23af8bf",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Allow today\u0027s plugins to keep working as expected.",
      "range": {
        "startLine": 129,
        "startChar": 42,
        "endLine": 129,
        "endChar": 43
      },
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19780068_1a96c9f8",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 139,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Because of the next rule, it would be too easy to expose stuff by accident, as all contents of any parents of a public plugin will effectively be exposed and public as if they were contained in the public plugin.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a979877e_fb2364f1",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Anything accessible (type, bindings, injections) to a Public plugin via its parents will be publicly exposed to child plugins of the public plugin.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "568b01d9_2b231f3d",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "s/Injection Points/DynamicXs/",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "981ed499_968a4971",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Allows producers to be in other top-level plugins.",
      "range": {
        "startLine": 143,
        "startChar": 12,
        "endLine": 143,
        "endChar": 13
      },
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4255c466_8552ad19",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-04-01T06:30:25Z",
      "side": 1,
      "message": "what do you mean by \"same top-level plugin\" .?",
      "range": {
        "startLine": 146,
        "startChar": 40,
        "endLine": 146,
        "endChar": 61
      },
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "141885ef_abf6bb30",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 148,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Producing plugins should use DynamicXs if that is not desired.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3716704_1cbe1a26",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Provides for service levels just as \"high\" as with JIT loading without the JIT overhead of lazy loading and cache management.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "478d1788_925a97cb",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "Add top-level plugin sections here for each jar to show how many jars there are (only 3), and which sub-plugins are in which jar.",
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e336e2be_99706400",
        "filename": "pages/design-docs/inter-plugin-communication/solution-sub-plugins.md",
        "patchSetId": 2
      },
      "lineNbr": 172,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-31T20:15:57Z",
      "side": 1,
      "message": "PluginA-public-API \u003c- PluginB-public-API \u003c- PluginC-private can see PluginA-public-API without depending on it or even knowing that it exists.",
      "range": {
        "startLine": 172,
        "startChar": 0,
        "endLine": 172,
        "endChar": 17
      },
      "revId": "d263aea0bab941adcd0aa237af9ef7fc4736bd0a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}