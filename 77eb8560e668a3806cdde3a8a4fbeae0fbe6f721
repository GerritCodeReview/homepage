{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8055114a_8f3b8770",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-03-08T15:48:56Z",
      "side": 1,
      "message": "Thanks for the in-depth description of your needs.\n",
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f0a69c8_2049e350",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-08T16:51:45Z",
      "side": 1,
      "message": "Thanks for uploading this and apologies for the delay of doing a full review.\nI will do another round of read/review also in the next few days.\nThis is an interesting use-case, thanks for sharing it.",
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "511b772b_4522bf4c",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-08T16:42:45Z",
      "side": 1,
      "message": "This is problematic IMHO: you could have a genuine bug and fail because you used the wrong version of the API. Then you manage this as assumption that the other plugin would not exist, which would be very prone to errors.",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 109,
        "endChar": 74
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29c1fea2_10585319",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 116,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-03-08T15:48:56Z",
      "side": 1,
      "message": "do you see a use-case where the cooperation of the plugins is decided after the plugin is released? In other words: you would be able to tell that a plugin is a Consumer of an API (because gerrit has to somehow hook it up to the provider), but is there a use-case for having plugins be a cross-plugin API provider without this being planned?",
      "range": {
        "startLine": 113,
        "startChar": 21,
        "endLine": 116,
        "endChar": 51
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe0844aa_25c42407",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 118,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-08T16:19:19Z",
      "side": 1,
      "message": "libModules doesn\u0027t require a custom-build of Gerrit: it is a functionality of vanilla Gerrit.",
      "range": {
        "startLine": 118,
        "startChar": 29,
        "endLine": 118,
        "endChar": 42
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9d4f2d1_1e023013",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 121,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-08T16:32:03Z",
      "side": 1,
      "message": "How would the consumers of the plugin would be able to detect the interface change?",
      "range": {
        "startLine": 121,
        "startChar": 10,
        "endLine": 121,
        "endChar": 53
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f33e635_78ac617b",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 121,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T20:45:22Z",
      "side": 1,
      "message": "Thinking aloud: because things may change at runtime dynamically, this system should be able to understand what \"version\" of the API is currently loaded and what version of the implementation is loaded (or not loaded yet?) and understand that the invocation isn\u0027t possible and return a 404.\n\nThat is *one* possible solution, but I am wondering if all that \"dynamic behaviour\" is really needed?",
      "parentUuid": "c9d4f2d1_1e023013",
      "range": {
        "startLine": 121,
        "startChar": 10,
        "endLine": 121,
        "endChar": 53
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebe190f4_0c9f113a",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 127,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-08T16:50:15Z",
      "side": 1,
      "message": "That depends on what you mean by \"work\": at L110 you are proposing to return 404s when plugins are not getting the interface they expect, which is not exactly a working environment IMHO.",
      "range": {
        "startLine": 126,
        "startChar": 60,
        "endLine": 127,
        "endChar": 10
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95277c4c_fde9e9d0",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 128,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-08T16:32:03Z",
      "side": 1,
      "message": "That makes sense if you fix a bug in the implementation and I agree it is a good thing.\n\nWhat happens if change the API? It *may* work or it *may* break, you just don\u0027t know. Are you suggesting that we just will allow the plugins to break and accept the fact?",
      "range": {
        "startLine": 127,
        "startChar": 74,
        "endLine": 128,
        "endChar": 45
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad291cb9_1857e136",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 137,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-03-08T15:48:56Z",
      "side": 1,
      "message": "wouldn\u0027t this be implicit? If a plugin exposes an API, you could have a \n\n Object getCachedData(Object key) \n\nas part of the API.\n\n(possibly with concrete types, instead, if that is part of the implementation).",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 38
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6ca74d5_0da14f26",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 164,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-03-08T15:48:56Z",
      "side": 1,
      "message": "Doesn\u0027t this also mean that plugins would interfere with each other through their dependencies?\n\nI mean: \n\n* Let\u0027s say plugin Consumer depends on classes from plugin Provider through this mechanism.\n\n* If Consumer depends on some base library (eg. for XML parsing) at version L, and Provider happens to require the same library, but at version L\u0027, will it be possible for both of them to have their own private version of the library (which I think is possible today), or do you have to make a choice?",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 164,
        "endChar": 69
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}