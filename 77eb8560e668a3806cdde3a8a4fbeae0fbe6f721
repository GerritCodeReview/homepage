{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8055114a_8f3b8770",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-03-08T15:48:56Z",
      "side": 1,
      "message": "Thanks for the in-depth description of your needs.\n",
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f0a69c8_2049e350",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-08T16:51:45Z",
      "side": 1,
      "message": "Thanks for uploading this and apologies for the delay of doing a full review.\nI will do another round of read/review also in the next few days.\nThis is an interesting use-case, thanks for sharing it.",
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "553945a5_8bc5a9f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T21:18:10Z",
      "side": 1,
      "message": "I had another careful read of the use-case and yes, it makes sense to me.\nI find it very useful and, for the depends-on plugin, it should be a core functionality IMHO because I would love to have Gerrit exposing *one way* to define the dependency of changes across repositories.",
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17880ac0_0f031cfe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-03-10T00:34:25Z",
      "side": 1,
      "message": "Publishing some responses I have so that the conversation can continue. I\u0027ll try to reply to everything tomorrow.",
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74b61afc_0fa6c4b8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-10T20:43:36Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "17880ac0_0f031cfe",
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1eeb341_811242bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-13T01:08:02Z",
      "side": 1,
      "message": "Ping: is there any more progress planned on the use-cases document?",
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7adf339_1cde2194",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-04-13T17:00:58Z",
      "side": 1,
      "message": "I think I just published the last updates and all comments are addressed.",
      "parentUuid": "c1eeb341_811242bb",
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "166134cb_918f2cad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-04-13T17:00:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74b61afc_0fa6c4b8",
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c3a01ba_00350990",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 20,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T21:18:10Z",
      "side": 1,
      "message": "It looks like you\u0027re reimplementing Zuul :-)\nHave you thought involving James and see if what they have in place can help solving your use-case?",
      "range": {
        "startLine": 19,
        "startChar": 39,
        "endLine": 20,
        "endChar": 58
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fd30d0d_2dc6ce1f",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 20,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-03-10T00:34:25Z",
      "side": 1,
      "message": "\u003e It looks like you\u0027re reimplementing Zuul :-)\n\nThat would imply that Zuul came first ;-)\n\n\u003e Have you thought involving James and see if what they have in place can help solving your use-case?\n\nWe\u0027ve shared thoughts on the list with James before and Zuul has different goals. It wants to be an all-in-one tool that isn\u0027t dependent on a single VCS. We want to provide functionality for CI systems that want to write less code when they interact with Gerrit. Our goal would be for Zuul to use this just as easily as someone creating a new CI system or someone developing a custom Jenkins workflow. That doesn\u0027t fit well with Zuul though because then it would still need to maintain code to handle dependencies for other VCSes.\n\nIt\u0027s also not our goal to rewrite the CI systems we already have. We want to get off our fork and making our customers (who maintain/develop those CI systems) change will only slow that down. Sometimes it\u0027s unavoidable, but we want to minimize it.",
      "parentUuid": "9c3a01ba_00350990",
      "range": {
        "startLine": 19,
        "startChar": 39,
        "endLine": 20,
        "endChar": 58
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da364861_ae991c5e",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 20,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-10T20:43:36Z",
      "side": 1,
      "message": "\u003e \u003e It looks like you\u0027re reimplementing Zuul :-)\n\u003e \n\u003e That would imply that Zuul came first ;-)\n\u003e \n\u003e \u003e Have you thought involving James and see if what they have in place can help solving your use-case?\n\u003e \n\u003e We\u0027ve shared thoughts on the list with James before and Zuul has different goals. It wants to be an all-in-one tool that isn\u0027t dependent on a single VCS. We want to provide functionality for CI systems that want to write less code when they interact with Gerrit. Our goal would be for Zuul to use this just as easily as someone creating a new CI system or someone developing a custom Jenkins workflow. That doesn\u0027t fit well with Zuul though because then it would still need to maintain code to handle dependencies for other VCSes.\n\u003e \n\u003e It\u0027s also not our goal to rewrite the CI systems we already have. We want to get off our fork and making our customers (who maintain/develop those CI systems) change will only slow that down. Sometimes it\u0027s unavoidable, but we want to minimize it.\n\nFair enough: good that you guys thought about it.",
      "parentUuid": "3fd30d0d_2dc6ce1f",
      "range": {
        "startLine": 19,
        "startChar": 39,
        "endLine": 20,
        "endChar": 58
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04551f6a_26d96e02",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 60,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T21:18:10Z",
      "side": 1,
      "message": "This already exists in Zuul: it would make sense to talk to them and try to put something together that would support the \u0027Depends-On\u0027 for both.\n\nAlso, Gerrit core could also be a good candidate, as x-repo dependencies aren\u0027t currently implemented and they are mostly needed by everyone.\n\nAt the moment Gerrit has the concept of \u0027single-repo\u0027 change dependency (the chain of dependencies on the top-right of the change screen) and the \u0027x-repo\u0027 topic grouping ... but not a \u0027x-repo\u0027 change dependency.\n\nThat\u0027s a core feature IMHO: everyone needs that and it would be best to have a single flavour of that, instead of the Zuul-flavour, the Qualcomm-flavour, the Foo.com-flavour ...",
      "range": {
        "startLine": 60,
        "startChar": 2,
        "endLine": 60,
        "endChar": 12
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a630c44_1f52103c",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 60,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-03-10T00:34:25Z",
      "side": 1,
      "message": "\u003e This already exists in Zuul: it would make sense to talk to them and try to put something together that would support the \u0027Depends-On\u0027 for both.\n\nSee above.\n\n\u003e \n\u003e Also, Gerrit core could also be a good candidate, as x-repo dependencies aren\u0027t currently implemented and they are mostly needed by everyone.\n\nI still this starting this in the depends-on plugin would be the right path. We could make it a core plugin if most installations end up wanting it.\n\n\u003e \n\u003e At the moment Gerrit has the concept of \u0027single-repo\u0027 change dependency (the chain of dependencies on the top-right of the change screen) and the \u0027x-repo\u0027 topic grouping ... but not a \u0027x-repo\u0027 change dependency.\n\u003e \n\u003e That\u0027s a core feature IMHO: everyone needs that and it would be best to have a single flavour of that, instead of the Zuul-flavour, the Qualcomm-flavour, the Foo.com-flavour ...\n\nI think getting the depends-on plugin out there and available is a good start to that path. I\u0027ll work on prioritizing that üòä",
      "parentUuid": "04551f6a_26d96e02",
      "range": {
        "startLine": 60,
        "startChar": 2,
        "endLine": 60,
        "endChar": 12
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abba1601_f38af4ae",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 60,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-10T20:43:36Z",
      "side": 1,
      "message": "SGTM üëç possibly breaking this down in smaller targets would help getting it through the door.",
      "parentUuid": "2a630c44_1f52103c",
      "range": {
        "startLine": 60,
        "startChar": 2,
        "endLine": 60,
        "endChar": 12
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ae92f63_c25fc502",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T21:18:10Z",
      "side": 1,
      "message": "That is *really cool*, I\u0027d like that :-)",
      "range": {
        "startLine": 63,
        "startChar": 28,
        "endLine": 64,
        "endChar": 62
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b97c3331_753a6401",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-03-10T00:34:25Z",
      "side": 1,
      "message": "Made possible by 245318: Add \u0027CherryPickOf\u0027 field for a change | https://gerrit-review.googlesource.com/c/gerrit/+/245318",
      "parentUuid": "9ae92f63_c25fc502",
      "range": {
        "startLine": 63,
        "startChar": 28,
        "endLine": 64,
        "endChar": 62
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e490a5b9_19e1931a",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-10T20:43:36Z",
      "side": 1,
      "message": "Like it a lot !",
      "parentUuid": "b97c3331_753a6401",
      "range": {
        "startLine": 63,
        "startChar": 28,
        "endLine": 64,
        "endChar": 62
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4376aed2_b0197804",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 90,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T21:18:10Z",
      "side": 1,
      "message": "Can you make an example of query attribute? What does it represent?",
      "range": {
        "startLine": 90,
        "startChar": 47,
        "endLine": 90,
        "endChar": 63
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67740912_fb5701f9",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 90,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-03-10T00:34:25Z",
      "side": 1,
      "message": "The output is just a parsed form of the Depends-on comment.\n\nSo for example, if you had a comment on your change like this:\n\n Depends-on: 123, 456\n\nYou would get something like this in the change query output (when you include the --depends-on flag):\n\n {\n    ...\n    \"plugins\" : [\n       {\n          \"name\" : \"depends-on\",\n          \"dependencies\" : [\n             123,\n             456\n          ]\n       }\n    ],\n    ...\n }",
      "parentUuid": "4376aed2_b0197804",
      "range": {
        "startLine": 90,
        "startChar": 47,
        "endLine": 90,
        "endChar": 63
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4a22405_a4a1b247",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 90,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-10T20:43:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "67740912_fb5701f9",
      "range": {
        "startLine": 90,
        "startChar": 47,
        "endLine": 90,
        "endChar": 63
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad94a573_b4a54065",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T21:18:10Z",
      "side": 1,
      "message": "Output where?",
      "range": {
        "startLine": 98,
        "startChar": 17,
        "endLine": 98,
        "endChar": 40
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "723597c2_7b795a2d",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-03-10T00:34:25Z",
      "side": 1,
      "message": "In the respective APIs results, see https://gerrit-review.googlesource.com/Documentation/dev-plugins.html#query_attributes",
      "parentUuid": "ad94a573_b4a54065",
      "range": {
        "startLine": 98,
        "startChar": 17,
        "endLine": 98,
        "endChar": 40
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf17acb5_24780b3b",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-10T20:43:36Z",
      "side": 1,
      "message": "Ack, can you add it to the document? So that is clear where it goes to?\nThanks for clarifying.",
      "parentUuid": "723597c2_7b795a2d",
      "range": {
        "startLine": 98,
        "startChar": 17,
        "endLine": 98,
        "endChar": 40
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "511b772b_4522bf4c",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-08T16:42:45Z",
      "side": 1,
      "message": "This is problematic IMHO: you could have a genuine bug and fail because you used the wrong version of the API. Then you manage this as assumption that the other plugin would not exist, which would be very prone to errors.",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 109,
        "endChar": 74
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6369adf0_b3fd36a3",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-03-10T00:34:25Z",
      "side": 1,
      "message": "\u003e [snip] \"and fail\"\n\nWhere do you see this described as failing? The point here is that it\u0027s graceful.",
      "parentUuid": "511b772b_4522bf4c",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 109,
        "endChar": 74
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f4af9b7_e7d38d94",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-10T20:43:36Z",
      "side": 1,
      "message": "Yes, let me rephrase: you could have a \"graceful behaviour\" that isn\u0027t working (a 404 isn\u0027t a success code) and may be left unnoticed. Having plugins loaded with a version mismatch impacts the overall functionality: the Gerrit admin should be called and, in extreme cases, also shutdown the instance.\n\nA \"graceful\" behaviour isn\u0027t always good :-(",
      "parentUuid": "6369adf0_b3fd36a3",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 109,
        "endChar": 74
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "066a5f00_31ca6b64",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-11T22:28:28Z",
      "side": 1,
      "message": "\u003e Yes, let me rephrase: you could have a \"graceful behaviour\" that isn\u0027t working (a 404 isn\u0027t a success code) and may be left unnoticed. Having plugins loaded with a version mismatch impacts the overall functionality: the Gerrit admin should be called and, in extreme cases, also shutdown the instance.\n\u003e \n\u003e A \"graceful\" behaviour isn\u0027t always good :-(\n\nVery true, neither is catastrophic failure. The use case request here is to have the ability to either handle the failure gracefully or not on a case by case basis.\n\nError handling very much depends on the specific type of failure. If I cannot connect to LDAP on startup, then I probably want startup to fail. If I cannot write to the git repos temporarily, then I probably want writes to fail, but not reads. If I cannot access my email server for a few seconds to send a comment, I don\u0027t want everything to fail catastrophically, nor to prevent changes from being uploaded. In order to make this policy appropriate, local error handling is generally needed. Just as it is important to be able to catch exceptions in java at times, it should be possible for plugin devs to determine what is the right thing to do when things fail. Catastrophic failure should not be the only option.\n\nFor this use case, propagated depends-on comment resolution is secondary to running the server, to reporting already resolved (or original) depends-ons comments to CI systems, and to almost all other things that these plugins can do. So if there is a critical fix needed for an important piece of functionality and this happens to break a less important piece of functionality, I still want to be able to deploy that fix. I certainly would be happy to know about the incompatibility in other ways though, warnings would probably be preferred in this case.",
      "parentUuid": "4f4af9b7_e7d38d94",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 109,
        "endChar": 74
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee9f10e6_2d421a25",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-12T10:20:34Z",
      "side": 1,
      "message": "\u003e \u003e Yes, let me rephrase: you could have a \"graceful behaviour\" that isn\u0027t working (a 404 isn\u0027t a success code) and may be left unnoticed. Having plugins loaded with a version mismatch impacts the overall functionality: the Gerrit admin should be called and, in extreme cases, also shutdown the instance.\n\u003e \u003e \n\u003e \u003e A \"graceful\" behaviour isn\u0027t always good :-(\n\u003e \n\u003e Very true, neither is catastrophic failure. The use case request here is to have the ability to either handle the failure gracefully or not on a case by case basis.\n\nYes, an \"evident failure\" that may (or may not) make Gerrit partly malfunctioning.\nCan you include a sentence on that?\n\n\u003e Error handling very much depends on the specific type of failure. If I cannot connect to LDAP on startup, then I probably want startup to fail. If I cannot write to the git repos temporarily, then I probably want writes to fail, but not reads. If I cannot access my email server for a few seconds to send a comment, I don\u0027t want everything to fail catastrophically, nor to prevent changes from being uploaded. In order to make this policy appropriate, local error handling is generally needed. Just as it is important to be able to catch exceptions in java at times, it should be possible for plugin devs to determine what is the right thing to do when things fail. Catastrophic failure should not be the only option.\n\n\u003e For this use case, propagated depends-on comment resolution is secondary to running the server, to reporting already resolved (or original) depends-ons comments to CI systems, and to almost all other things that these plugins can do. So if there is a critical fix needed for an important piece of functionality and this happens to break a less important piece of functionality, I still want to be able to deploy that fix. I certainly would be happy to know about the incompatibility in other ways though, warnings would probably be preferred in this case.\n\nYes, correct. The design document is on the generic x-plugin communication, where this use-case is one example. There are other examples (e.g. multi-site setup with x-plugin communication) where the failure of communication between plugins may cause the corruption of the repositories, where the problem needs to be raised a lot louder :-)",
      "parentUuid": "066a5f00_31ca6b64",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 109,
        "endChar": 74
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47729b84_dd671b6c",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-14T02:37:17Z",
      "side": 1,
      "message": "\u003e Yes, correct. The design document is on the generic x-plugin communication, where this use-case is one example. There are other examples (e.g. multi-site setup with x-plugin communication) where the failure of communication between plugins may cause the corruption of the repositories, where the problem needs to be raised a lot louder :-)\n\nTo clarify, this DD is about this specific use case, and is NOT trying to address other use cases. We have mentioned several other use cases in other places, and our proposed solutions might help solve other use cases also. Because I believe that that \"generic x-plugin communication\", involves some very different use cases that may require very different solution, I am not proposing that a common solution is required for all of these use cases, and I certainly hope that we are willing to evaluate solutions that only solve this use case and not expect the solution to be able to solve all the possible \"x-plugin communication\" use cases that could possibly exist as that might be impossible.\n\nIf you have other use cases that you think are essential for a solution to this use case to also address, then I suggest you write another DD for those, building upon this one if you find it to be useful. Or you could write a solution that solves this use case and other use cases as well (as I did), but I do not want to burden this doc with more than what is needed for this use case as I feel that this is hurtful in clarifying whether a solution actually meets the criteria for this use case or not. I intend to keep the scope limited on purpose, and I hope that you can please keep this in mind when reviewing this doc, and when offering solutions to this use case.",
      "parentUuid": "ee9f10e6_2d421a25",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 109,
        "endChar": 74
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29c1fea2_10585319",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 116,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-03-08T15:48:56Z",
      "side": 1,
      "message": "do you see a use-case where the cooperation of the plugins is decided after the plugin is released? In other words: you would be able to tell that a plugin is a Consumer of an API (because gerrit has to somehow hook it up to the provider), but is there a use-case for having plugins be a cross-plugin API provider without this being planned?",
      "range": {
        "startLine": 113,
        "startChar": 21,
        "endLine": 116,
        "endChar": 51
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0f3d3ec_66d66d70",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 116,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-11T22:28:28Z",
      "side": 1,
      "message": "Yes, if I understand this question right.\n\nFor example in another use case, not the one in this doc, for years now I have wanted the task plugin to be configurable at runtime, via its config file, to point a task factory to methods in other plugins that provide valuable data that could be used to generate task lists. Deliverables in particular tend to make good tasks since it can be important that a change meet different, per deliverable, criteria for each deliverable it is destined for. We want to avoid having to define for every change what its deliverables are, so using a PD plugin to do that would be great. To achieve this I want to be able to wire the task plugin to read from 2 of our PD plugins, yet I didn\u0027t want the PD plugins or the task plugin to even need to be designed at compile time to work together! To be fair, I certainly don\u0027t mind having to alter the PD plugins to know that they are exposing this data to the task plugin, or just in general for any consumer, but there is a nice allure to being able to wire upstream plugins developed by other people who don\u0027t even know about the task plugin up to it via config only! Taking this one step further, I think it would be very powerful if \"scripting\" plugins could wire together other plugins without this haven been planned by the other plugins.",
      "parentUuid": "29c1fea2_10585319",
      "range": {
        "startLine": 113,
        "startChar": 21,
        "endLine": 116,
        "endChar": 51
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe0844aa_25c42407",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 118,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-08T16:19:19Z",
      "side": 1,
      "message": "libModules doesn\u0027t require a custom-build of Gerrit: it is a functionality of vanilla Gerrit.",
      "range": {
        "startLine": 118,
        "startChar": 29,
        "endLine": 118,
        "endChar": 42
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4088a2ed_efbfc51f",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 118,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-04-13T17:00:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe0844aa_25c42407",
      "range": {
        "startLine": 118,
        "startChar": 29,
        "endLine": 118,
        "endChar": 42
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9d4f2d1_1e023013",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 121,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-08T16:32:03Z",
      "side": 1,
      "message": "How would the consumers of the plugin would be able to detect the interface change?",
      "range": {
        "startLine": 121,
        "startChar": 10,
        "endLine": 121,
        "endChar": 53
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f33e635_78ac617b",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 121,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T20:45:22Z",
      "side": 1,
      "message": "Thinking aloud: because things may change at runtime dynamically, this system should be able to understand what \"version\" of the API is currently loaded and what version of the implementation is loaded (or not loaded yet?) and understand that the invocation isn\u0027t possible and return a 404.\n\nThat is *one* possible solution, but I am wondering if all that \"dynamic behaviour\" is really needed?",
      "parentUuid": "c9d4f2d1_1e023013",
      "range": {
        "startLine": 121,
        "startChar": 10,
        "endLine": 121,
        "endChar": 53
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34c24f4c_b0e4f494",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 121,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-11T22:28:28Z",
      "side": 1,
      "message": "\u003e Thinking aloud: because things may change at runtime dynamically, this system should be able to understand what \"version\" of the API is currently loaded and what version of the implementation is loaded (or not loaded yet?) and understand that the invocation isn\u0027t possible and return a 404.\n\u003e \n\u003e That is *one* possible solution, but I am wondering if all that \"dynamic behaviour\" is really needed?\n\nImagine a plugin that talks to one specific customer\u0027s bug tracker. If that customer upgrades their bugtracker and it becomes incompatible with your plugin, would you want the gerrit server to not be able to be restarted and provide service to all your other customers? \n\nWe do not believe that all services are equal. We want the plugin environment to acknowledge that and to allow this to be reflected in its designs. We have plugins that do treat some external services as mandatory, for example some of our PD plugins will not load if they cannot access their external DB since we view that as catastrophic for the plugin (and likely a miss-configuration). So we understand why mandatory can be a feature, I hope that you can understand why sometimes mandatory is not the desired thing, and that you will trust our doc when we say that we want some things to be graceful.",
      "parentUuid": "8f33e635_78ac617b",
      "range": {
        "startLine": 121,
        "startChar": 10,
        "endLine": 121,
        "endChar": 53
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46051beb_fad9ca8a",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 121,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T22:07:50Z",
      "side": 1,
      "message": "\u003e \u003e Thinking aloud: because things may change at runtime dynamically, this system should be able to understand what \"version\" of the API is currently loaded and what version of the implementation is loaded (or not loaded yet?) and understand that the invocation isn\u0027t possible and return a 404.\n\u003e \u003e \n\u003e \u003e That is *one* possible solution, but I am wondering if all that \"dynamic behaviour\" is really needed?\n\u003e \n\u003e Imagine a plugin that talks to one specific customer\u0027s bug tracker. If that customer upgrades their bugtracker and it becomes incompatible with your plugin, would you want the gerrit server to not be able to be restarted and provide service to all your other customers? \n\nThe answer is always \"it depends on the use-case\" :-)\nThere are situations were, as you said, the integration with the bug-tracker is a \"nice to have\" but isn\u0027t functional to the development workflow. In that case, you may want just to keep Gerrit up and have the plugin unloaded.\nThere are other situations where the integration with the bug-tracker is a mandatory requirement from a compliance perspective: in that case, Gerrit won\u0027t be useful until the integration is restored.\n\nThat\u0027s the reason why Sa≈°a introduced the concept of \"mandatory\" plugins, which is a configuration setting that allows to define which plugin is mandatory and which one isn\u0027t.\n\n\u003e We do not believe that all services are equal. We want the plugin environment to acknowledge that and to allow this to be reflected in its designs. We have plugins that do treat some external services as mandatory, for example some of our PD plugins will not load if they cannot access their external DB since we view that as catastrophic for the plugin (and likely a miss-configuration). So we understand why mandatory can be a feature, I hope that you can understand why sometimes mandatory is not the desired thing, and that you will trust our doc when we say that we want some things to be graceful.\n\nSure, I am not saying that all plugins should be mandatory: I agree with you on that point.",
      "parentUuid": "34c24f4c_b0e4f494",
      "range": {
        "startLine": 121,
        "startChar": 10,
        "endLine": 121,
        "endChar": 53
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebe190f4_0c9f113a",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 127,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-08T16:50:15Z",
      "side": 1,
      "message": "That depends on what you mean by \"work\": at L110 you are proposing to return 404s when plugins are not getting the interface they expect, which is not exactly a working environment IMHO.",
      "range": {
        "startLine": 126,
        "startChar": 60,
        "endLine": 127,
        "endChar": 10
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a82e815a_66ca4619",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 127,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T21:18:10Z",
      "side": 1,
      "message": "What about the operations happened *before* the plugin is loaded?\n\nExample: \nT0: Only the depends-on plugin is loaded, it listens to the cherry-pick event and copy the dependencies. They are unexpanded though because the PD plugin that was doing the expansion isn\u0027t there.\nT1: The PD plugin is loaded and it will connect to the depends-on plugin for expanding the dependencies for new cherry-picks.\n\nIf I cherry-pick a change A between T0 and T1 and another B after T1, the two expansions will be different.\n\nHow do I \"retrofit\" the expansion to A as well?\nWho has this responsibility? The depends-on plugin? The PD plugin? Both?",
      "range": {
        "startLine": 127,
        "startChar": 16,
        "endLine": 127,
        "endChar": 47
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf237d49_65f26ea2",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 127,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-11T22:28:28Z",
      "side": 1,
      "message": "\u003e What about the operations happened *before* the plugin is loaded?\n\nGood question.\n\n\u003e Example: \n\u003e T0: Only the depends-on plugin is loaded, it listens to the cherry-pick event and copy the dependencies. They are unexpanded though because the PD plugin that was doing the expansion isn\u0027t there.\n\u003e T1: The PD plugin is loaded and it will connect to the depends-on plugin for expanding the dependencies for new cherry-picks.\n\u003e \n\u003e If I cherry-pick a change A between T0 and T1 and another B after T1, the two expansions will be different.\n\u003e \n\u003e How do I \"retrofit\" the expansion to A as well?\n\u003e Who has this responsibility? The depends-on plugin? The PD plugin? Both?\n\nResolution/Expansion is on ongoing process as the needed changes on the other deliverables may not have been cherry-picked themselves yet at the time the dependent change is cherry-picked. Thus if an resolution/expansion is missed it is something that can happen again later in time. In fact, we don\u0027t currently perform resolution/expansion (converting change-ids to change-numbers) on cherry-picks! We only convert the other way around on cherry-picks (change-numbers to change-ids), this does not require any PD resolution. We expect resolution/expansion to happen later. Currently our CI systems triggers resolution/expansion (it has the responsibility to do this, not the plugins since it needs the data) every time they are looking for dependencies. If other users/systems need the data, they can trigger resolution/expansion too; we probably will want the task plugin to trigger this soon so that it can always display the latest resolutions when viewing dependencies on a change page.",
      "parentUuid": "a82e815a_66ca4619",
      "range": {
        "startLine": 127,
        "startChar": 16,
        "endLine": 127,
        "endChar": 47
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "239e468b_89a64566",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 127,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-11T22:28:28Z",
      "side": 1,
      "message": "\u003e That depends on what you mean by \"work\": at L110 you are proposing to return 404s when plugins are not getting the interface they expect, which is not exactly a working environment IMHO.\n\nI think you miss-read L110, we are proposing that plugins deal with \"not getting the interface they expect\" as if they received 404s from an external service, not that they themselves return 404s (although in some cases, that would be appropriate).",
      "parentUuid": "ebe190f4_0c9f113a",
      "range": {
        "startLine": 126,
        "startChar": 60,
        "endLine": 127,
        "endChar": 10
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95277c4c_fde9e9d0",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 128,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-08T16:32:03Z",
      "side": 1,
      "message": "That makes sense if you fix a bug in the implementation and I agree it is a good thing.\n\nWhat happens if change the API? It *may* work or it *may* break, you just don\u0027t know. Are you suggesting that we just will allow the plugins to break and accept the fact?",
      "range": {
        "startLine": 127,
        "startChar": 74,
        "endLine": 128,
        "endChar": 45
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d5e9830_1037a717",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 128,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-03-10T00:34:25Z",
      "side": 1,
      "message": "\u003e What happens if change the API? It *may* work or it *may* break, you just don\u0027t know. Are you suggesting that we just will allow the plugins to break and accept the fact?\n\nI would always recommend using a non production server to test deployments prior to production. I\u0027m not Gustaf ;-) (remember http://www.quickmeme.com/img/2e/2e639765de8370ccc4b625c65b587c7267f92fd5a3c063bd049ce500974ce119.jpg from first hackathon?)",
      "parentUuid": "95277c4c_fde9e9d0",
      "range": {
        "startLine": 127,
        "startChar": 74,
        "endLine": 128,
        "endChar": 45
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91aec5c8_b5e3a09a",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 128,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-10T20:43:36Z",
      "side": 1,
      "message": "Ah, that looks more reasonable. Why then requiring a graceful failure in case of version incompatibilities? Don\u0027t you prefer to have a more evident failure?\n\nI am always shocked when I read people in the mailing list reporting strange errors on plugins, and then realising that they were running a *totally incompatible version* for days !!!! I would rather prefer a loud blow :-) so that I don\u0027t say to my people \"yeah, migration done, go !\".",
      "parentUuid": "2d5e9830_1037a717",
      "range": {
        "startLine": 127,
        "startChar": 74,
        "endLine": 128,
        "endChar": 45
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b566358_4a00712f",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 128,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-11T22:28:28Z",
      "side": 1,
      "message": "\u003e Why then requiring a graceful failure in case of version incompatibilities? Don\u0027t you prefer to have a more evident failure?\n\nThis issue has been addressed in several other replies.",
      "parentUuid": "91aec5c8_b5e3a09a",
      "range": {
        "startLine": 127,
        "startChar": 74,
        "endLine": 128,
        "endChar": 45
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59051d03_c82af7b0",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 130,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T21:18:10Z",
      "side": 1,
      "message": "Are you saying that this mechanism won\u0027t take into consideration high-availability and immutability requirements?\n\nHow a Gerrit admin can detect that the system isn\u0027t fully working because:\n- one of the plugins needed isn\u0027t loaded, and then the depends-on aren\u0027t expanded as they should\n- one of the plugin has been reloaded but has broken the API and therefore has a waterfall effect on other plugins not fully working?",
      "range": {
        "startLine": 130,
        "startChar": 34,
        "endLine": 130,
        "endChar": 73
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74fc9ea1_d5949ce2",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 130,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-03-10T00:34:25Z",
      "side": 1,
      "message": "\u003e Are you saying that this mechanism won\u0027t take into consideration high-availability and immutability requirements?\n\nNo, not saying that at all.\n\n\u003e \n\u003e How a Gerrit admin can detect that the system isn\u0027t fully working because:\n\u003e - one of the plugins needed isn\u0027t loaded, and then the depends-on aren\u0027t expanded as they should\n\u003e - one of the plugin has been reloaded but has broken the API and therefore has a waterfall effect on other plugins not fully working?\n\nThose are good questions that a solution should address. How should that get included in the use case doc?",
      "parentUuid": "59051d03_c82af7b0",
      "range": {
        "startLine": 130,
        "startChar": 34,
        "endLine": 130,
        "endChar": 73
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf894dfc_f5df5597",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 130,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-10T20:43:36Z",
      "side": 1,
      "message": "Every use-case has a section for the failure scenarios: just put them \"what to do when things go wrong\" chapter?",
      "parentUuid": "74fc9ea1_d5949ce2",
      "range": {
        "startLine": 130,
        "startChar": 34,
        "endLine": 130,
        "endChar": 73
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "207067f8_5371c80a",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 130,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-04-13T17:00:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf894dfc_f5df5597",
      "range": {
        "startLine": 130,
        "startChar": 34,
        "endLine": 130,
        "endChar": 73
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad291cb9_1857e136",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 137,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-03-08T15:48:56Z",
      "side": 1,
      "message": "wouldn\u0027t this be implicit? If a plugin exposes an API, you could have a \n\n Object getCachedData(Object key) \n\nas part of the API.\n\n(possibly with concrete types, instead, if that is part of the implementation).",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 38
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c3e5aef_9ad1679b",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 137,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T21:18:10Z",
      "side": 1,
      "message": "We are saying that all the three plugins should be able to be loaded and reloaded independently. Also, they should be albe to still work even if the others are broken or unloaded.\n\nIf I have plugin A that leverages the cache of plugin B (hence has an injection of that in one of its instances), how can B be unloaded without breaking A?\nHow can B be downloaded at all if one of its instances have been injected into A?",
      "parentUuid": "ad291cb9_1857e136",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 38
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3ec4a70_f3e39e33",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 137,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-11T22:28:28Z",
      "side": 1,
      "message": "\u003e wouldn\u0027t this be implicit?\n\nUnfortunately, I don\u0027t think this is implicit. There are ways to wire plugins together where cache sharing is not possible. In the current code base we have plugins that extend other plugins via switches and they cannot even share their own caches because they only have access to the classes in their plugin via a delegatingCL and that means they don\u0027t share the same instances or even class definitions and certainly not the same guice bindings as their own plugin.\n\n\u003e If I have plugin A that leverages the cache of plugin B (hence has an injection of that in one of its instances), how can B be unloaded without breaking A? How can B be downloaded at all if one of its instances have been injected into A?\n\nThose are good questions (and an assumed solution?) that we expect a solution to address.",
      "parentUuid": "6c3e5aef_9ad1679b",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 38
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e24a6f1_c9266a28",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T21:18:10Z",
      "side": 1,
      "message": "But if PD-plugin contains an injected instance of a manifest cache of the manifest-plugin, if you unload the manifest-plugin what the cache is pointing to?",
      "range": {
        "startLine": 139,
        "startChar": 24,
        "endLine": 139,
        "endChar": 40
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b1204be_704200c9",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-03-10T00:34:25Z",
      "side": 1,
      "message": "Let\u0027s first note that this is an example to highlight something tangentially related to the use case, not a complete solution. Let\u0027s save most discussion around implementation for solutions.\n\nIn this case, the PDs-plugin functionality that relies on that cache would be disabled for any requests that occur while the manifest plugin is unloaded.",
      "parentUuid": "6e24a6f1_c9266a28",
      "range": {
        "startLine": 139,
        "startChar": 24,
        "endLine": 139,
        "endChar": 40
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "730ed8bf_343bb9f8",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-10T20:43:36Z",
      "side": 1,
      "message": "\u003e Let\u0027s first note that this is an example to highlight something tangentially related to the use case, not a complete solution. Let\u0027s save most discussion around implementation for solutions.\n\u003e \n\u003e In this case, the PDs-plugin functionality that relies on that cache would be disabled for any requests that occur while the manifest plugin is unloaded.\n\nThat\u0027s an interesting problem to solve: how to detect that the classes of the object you are pointing to (the cache is injected and referenced by the plugin\u0027s instances) have been unloaded.\n\nI agree to keep them as use-cases, because I do not have idea how to achieve that in Java, would need to dig deeper.",
      "parentUuid": "0b1204be_704200c9",
      "range": {
        "startLine": 139,
        "startChar": 24,
        "endLine": 139,
        "endChar": 40
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "264a5a28_6761c54a",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-11T22:28:28Z",
      "side": 1,
      "message": "\u003e That\u0027s an interesting problem to solve: how to detect that the classes of the object you are pointing to (the cache is injected and referenced by the plugin\u0027s instances) have been unloaded.\n\nThis use case is not suggesting that other plugins need to detect that any of its references to caches or other objects are from a plugin that has been unloaded. We don\u0027t need that use case here as most operations that we want to support are request based. We envision that our plugins would be designed to not hold references to objects in other plugins beyond the duration of the request so that any resources, such as references to caches, objects, and class definitions, would no longer be held after the request completes.",
      "parentUuid": "730ed8bf_343bb9f8",
      "range": {
        "startLine": 139,
        "startChar": 24,
        "endLine": 139,
        "endChar": 40
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccc63f07_f698d458",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 157,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T21:18:10Z",
      "side": 1,
      "message": "No, this isn\u0027t required at all. It *could be useful* to read the code in absence of good documentation, but actually having a well defined API and a stable contract it would be a lot better than just reading the source code.",
      "range": {
        "startLine": 156,
        "startChar": 63,
        "endLine": 157,
        "endChar": 13
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3b6fe6c_d96460f0",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 157,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-11T22:28:28Z",
      "side": 1,
      "message": "\u003e No, this isn\u0027t required at all.\n\nYou seem to be objecting to something here, but it is unclear what, can you clarify? There is no mention of the word \"required\" or implication of a requirement in this paragraph.\n\nI believe you are describing a limitation when developing to non native APIs (RPCs), or reflection APIs, and we do not see this as desirable. We desire the ability to have normal compile time API development. This desire is not an argument for or against having good API documentation.",
      "parentUuid": "ccc63f07_f698d458",
      "range": {
        "startLine": 156,
        "startChar": 63,
        "endLine": 157,
        "endChar": 13
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d81f6a69_6a5111f0",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 157,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T22:07:50Z",
      "side": 1,
      "message": "\u003e \u003e No, this isn\u0027t required at all.\n\u003e \n\u003e You seem to be objecting to something here, but it is unclear what, can you clarify?\n\nMy comment was more on what is a \"Regular Plugin Development\". Lots of time when you develop a plugin and you need to use an API from a dependency or another component, you have access to:\n- API definition\n- API documentation\n\nYou do not need to have access to the JAR file (or the source file) of any part of its implementation.",
      "parentUuid": "c3b6fe6c_d96460f0",
      "range": {
        "startLine": 156,
        "startChar": 63,
        "endLine": 157,
        "endChar": 13
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ee32d58_2beef703",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 157,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-14T00:53:02Z",
      "side": 1,
      "message": "I still see that you need to have access to \"at least a subset of the source\" whilst my comment was that you don\u0027t need the source code at all, you just need to have access to the interface of the API you\u0027re calling.\n\nAny feedback?",
      "parentUuid": "d81f6a69_6a5111f0",
      "range": {
        "startLine": 156,
        "startChar": 63,
        "endLine": 157,
        "endChar": 13
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3359efa8_d657da3a",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 157,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-04-14T01:55:58Z",
      "side": 1,
      "message": "Sorry I didn\u0027t reply specifically to that point. I would consider the interface a subset of the source.",
      "parentUuid": "9ee32d58_2beef703",
      "range": {
        "startLine": 156,
        "startChar": 63,
        "endLine": 157,
        "endChar": 13
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1b88e33_2e8b912a",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 157,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-14T02:37:17Z",
      "side": 1,
      "message": "\u003e I still see that you need to have access to \"at least a subset of the source\n\nI don\u0027t see that mentioned anywhere as a need or requirement, I see it mentioned as \"that\u0027s commonly accomplished by\". Can explain your concern?",
      "parentUuid": "3359efa8_d657da3a",
      "range": {
        "startLine": 156,
        "startChar": 63,
        "endLine": 157,
        "endChar": 13
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6ca74d5_0da14f26",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 164,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-03-08T15:48:56Z",
      "side": 1,
      "message": "Doesn\u0027t this also mean that plugins would interfere with each other through their dependencies?\n\nI mean: \n\n* Let\u0027s say plugin Consumer depends on classes from plugin Provider through this mechanism.\n\n* If Consumer depends on some base library (eg. for XML parsing) at version L, and Provider happens to require the same library, but at version L\u0027, will it be possible for both of them to have their own private version of the library (which I think is possible today), or do you have to make a choice?",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 164,
        "endChar": 69
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6cd31c8_afe32779",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 164,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-11T22:28:28Z",
      "side": 1,
      "message": "I don\u0027t know that this can be answered without a specific solution in mind.  I don\u0027t believe that we specifically care about this for this use case. I don\u0027t really know how IDEs work, but I envision ways to make this at least possible for runtime (via classloader exclusions).",
      "parentUuid": "b6ca74d5_0da14f26",
      "range": {
        "startLine": 162,
        "startChar": 0,
        "endLine": 164,
        "endChar": 69
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bfb7d41_1ee09941",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 166,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-09T21:18:10Z",
      "side": 1,
      "message": "The hot-swapping isn\u0027t a mandatory requirement for a plugin, that\u0027s the reason why each plugin *declare* the reload method that is supported (see [1]):\n\n1. restart (the plugin is first removed and then added again)\n2. reload (the plugin is \"hot-swapped\")\n\nSa≈°a has later defined also the \"mandatory plugins\" that cannot be unloaded at all, even if they would support either 1. or 2. or both of them.\n\nI have then introduced *years ago* the ability for plugins to be loaded as part of the base Gerrit injectors (sysInjector first and more recently the dbInjector and batchInjector), allowing plugins to replace core modules (e.g. cache-chroniclemap) or adding extra Dynamic* entities to allow x-plugin communication.\n\nAll of that is part of the \"normal plugin development\" and would already enable your use-case IMHO.\n\n[1] https://gerrit-review.googlesource.com/Documentation/dev-plugins.html#reload_method",
      "range": {
        "startLine": 165,
        "startChar": 2,
        "endLine": 166,
        "endChar": 7
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66cbff4c_c33ec931",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 166,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-03-11T22:28:28Z",
      "side": 1,
      "message": "This section is describing what we see as normal to avoid any miss-conceptions about what we mean. We think the dynamic nature of plugins is normal, and we think that what you are describing is clearly an exceptional (but still a very valid) use of plugins, and I hope that you can be open to this perspective. I believe that DynamicMaps, Sets, Items, and the plugin (re)loading mechanisms were specifically designed to handle these use cases as normal from the start. The dynamic use case was designed long before the \"mandatory\" feature was added. The overwhelming majority of plugins operate without the use of \"mandatory\".\n\nWe see the need to use \"mandatory\" to resolve any use case other than \"I don\u0027t WANT my server to start without these plugins\" as failures in the plugin environment to meet plugin needs. I see it as unfortunate (yet justifiable as you do interesting and valuable things with plugins) that for you \"mandatory\", and \"lib\", may have indeed become \"normal\" ways of developing plugins. We don\u0027t want them to become normal for us! If this is indeed normal for you, then I believe that this is the strongest evidence that Gerrit needs more functionality to let plugins get back to being able to provide features without losing the original intended dynamic nature of plugins.",
      "parentUuid": "8bfb7d41_1ee09941",
      "range": {
        "startLine": 165,
        "startChar": 2,
        "endLine": 166,
        "endChar": 7
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd3de2f9_7bcecc08",
        "filename": "pages/design-docs/inter-plugin-communication/use-cases.md",
        "patchSetId": 7
      },
      "lineNbr": 166,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2021-03-29T11:17:35Z",
      "side": 1,
      "message": "\u003e Sa≈°a has later defined also the \"mandatory plugins\" that cannot be unloaded at all, even if they would support either 1. or 2. or both of them.\n\nJust a small clarification about the mandatory plugins feature: a mandatory plugin cannot be restarted (stop + start) but they can be reloaded (atomic switch from the old to the new plugin version without exposing a plugin downtime). This is also documented in [1]\n\n[1] https://gerrit-review.googlesource.com/Documentation/config-gerrit.html#plugins",
      "parentUuid": "66cbff4c_c33ec931",
      "range": {
        "startLine": 165,
        "startChar": 2,
        "endLine": 166,
        "endChar": 7
      },
      "revId": "77eb8560e668a3806cdde3a8a4fbeae0fbe6f721",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}