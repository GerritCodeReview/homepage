{
  "comments": [
    {
      "key": {
        "uuid": "a795e17f_abefdde5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-08-31T12:47:03Z",
      "side": 1,
      "message": "PTAL",
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3da38ce6_bac3b04a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-09-04T08:46:58Z",
      "side": 1,
      "message": "@Ben are you planning to upload another PS to address the remaining nits?",
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56c4b95f_d2d42df6",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-09-01T09:32:31Z",
      "side": 1,
      "message": "FYI:\nThis is how we would like to use it.\nThe data-provider-plugin has access to a service-account that is a Jenkins user and accesses CI data that way.\nIt would be beneficial if the user-login UI-parts were optional when/if needed.",
      "range": {
        "startLine": 60,
        "startChar": 66,
        "endLine": 61,
        "endChar": 87
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5764c64_4a3e20c5",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-09-01T09:33:47Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "56c4b95f_d2d42df6",
      "range": {
        "startLine": 60,
        "startChar": 66,
        "endLine": 61,
        "endChar": 87
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94f90fc7_97d69c76",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 1079742
      },
      "writtenOn": "2020-08-31T14:07:17Z",
      "side": 1,
      "message": "So COMPLETED will group runs that have successfully completed (all test passed) whereas all other runs that are completed but not successful will show under: ERROR, WARNING or INFO. \n\nIf so, what text could we use to make it clear that all runs passed? \"Successfully completed\" or \"Passed\" maybe?",
      "range": {
        "startLine": 115,
        "startChar": 5,
        "endLine": 115,
        "endChar": 14
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fda67063_60bf2859",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-09-01T14:18:30Z",
      "side": 1,
      "message": "TLDR; Runs that don\u0027t provide additional info shouldn\u0027t be in the INFO category\n\nFrom discussions with Ben I suggested that there\u0027s a need for a category for Runs that completed successfully but had no additional info to provide i.e. the least interesting category for the user.\nThis to make it easy for a user to find/identify a Run that actually provide some additional info (and would fall under INFO category).\n\nIf Runs that don\u0027t provide any additional info also end up in the INFO category a user would be forced to look at all successfully completed runs, every time, in order to find out if any of them provide additional info.\n\nCompleted and successful Runs would fall under one of the categories (COMPLETED|INFO|WARNING).\nUnsuccessful Runs will fall under ERROR category.",
      "parentUuid": "94f90fc7_97d69c76",
      "range": {
        "startLine": 115,
        "startChar": 5,
        "endLine": 115,
        "endChar": 14
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae761a4b_cf1128dd",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-09-07T12:37:27Z",
      "side": 1,
      "message": "A check can be COMPLETED and also yield an ERROR.\n\nCOMPLETED is just the \"run\" related status and ERROR is a \"result\".",
      "parentUuid": "fda67063_60bf2859",
      "range": {
        "startLine": 115,
        "startChar": 5,
        "endLine": 115,
        "endChar": 14
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6091907_cbd4d7a5",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-09-08T07:25:37Z",
      "side": 1,
      "message": "\u003e A check can be COMPLETED and also yield an ERROR.\n\u003e \n\u003e COMPLETED is just the \"run\" related status and ERROR is a \"result\".\n\nYour comment is confusing me. A check can only have one category right? So a check cannot have COMPLETED and ERROR!?\nDid you mean to say that a check may complete successfully but the result is that f.i. the code is formatted incorrectly which would place it in the ERROR category.\nIIUC the \"category\" COMPLETED is something like \"No new is good news\", \"All is well, nothing to see here\"",
      "parentUuid": "ae761a4b_cf1128dd",
      "range": {
        "startLine": 115,
        "startChar": 5,
        "endLine": 115,
        "endChar": 14
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f42db6c2_9102a021",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-09-08T07:49:25Z",
      "side": 1,
      "message": "When you analysis run completes with an error, then you have two options:\n\n1. Issue just an ERROR check.\n\n2. Issue two Check objects: A COMPLETED one and an ERROR one.\n\nI think I would prefer the second options, but I don\u0027t want to be too opinionated right now. Ultimately the data provider can make that choice.\n\nBut it is important to note that COMPLETED is a neutral status. It does not mean SUCCESS or PASSED. That would be something different.\n\nI do realize that with allowing option (2.) we may have to weaken the uniqueness requirement of the name (\"The name must be unique. There canâ€™t be two checks with the same change/ps/attempt/name.\") And we may at some point even want to link COMPLETED runs to their results in some way. But I would prefer to iterate on that based on user feedback and seeing this in action for a while.",
      "parentUuid": "f6091907_cbd4d7a5",
      "range": {
        "startLine": 115,
        "startChar": 5,
        "endLine": 115,
        "endChar": 14
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b1fcd7a_b4d2f558",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-09-08T08:16:14Z",
      "side": 1,
      "message": "Personally I don\u0027t see the benefit from having two check objects, one to track whether the job behind the check failed or not and one to track whether the check itself failed.\nTo me the, extra, COMPLETED check in this use-case adds complexity but very little (if any) value.\nIf the check or job fails someone will need to investigate it regardless of what went wrong. It would be better to differentiate between a failed job and a failed check by using tags.\nBut that\u0027s just my 5 cents.\n\nMy initial idea with a No-News status was that it was for checks that reported success (i.e. all is well, nothing to add) or checks that opted not to report anything. If you feel that the term COMPLETED is confusing and every completed job should have a COMPLETED check perhaps the solution is to rename it?\n\nNO_INFO?",
      "parentUuid": "f42db6c2_9102a021",
      "range": {
        "startLine": 115,
        "startChar": 5,
        "endLine": 115,
        "endChar": 14
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "066381f5_17eb811d",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1079742
      },
      "writtenOn": "2020-08-31T14:07:17Z",
      "side": 1,
      "message": "nit: contain",
      "range": {
        "startLine": 117,
        "startChar": 31,
        "endLine": 117,
        "endChar": 32
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "472b9d4d_0d6ded96",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-09-07T12:37:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "066381f5_17eb811d",
      "range": {
        "startLine": 117,
        "startChar": 31,
        "endLine": 117,
        "endChar": 32
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffa77621_6f45c05e",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1002560
      },
      "writtenOn": "2020-09-01T14:23:11Z",
      "side": 1,
      "message": "Oh god you have a trailing white space.\n\u003c/james_bond_looking_through_binoculars\u003e",
      "range": {
        "startLine": 127,
        "startChar": 78,
        "endLine": 127,
        "endChar": 79
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2394ea5d_6e2abeaa",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-09-07T12:37:27Z",
      "side": 1,
      "message": "Yeah, I have invested some time in trying to figure out how to configure an IntelliJ save action for md files. But failed.\n\nA sed bash alias to the rescue ...",
      "parentUuid": "ffa77621_6f45c05e",
      "range": {
        "startLine": 127,
        "startChar": 78,
        "endLine": 127,
        "endChar": 79
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ada197c_cfbd6a70",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 131,
      "author": {
        "id": 1002560
      },
      "writtenOn": "2020-09-01T14:23:11Z",
      "side": 1,
      "message": "Would you be open to something like INTERNAL_FAILURE? In our projects we explicitly surface internal failure and infrastructure failures to the users. We\u0027re only reliable to so many nines, and things happen. We do retries but eventually it\u0027s important to backoff in partial degradation mode, and we need to surface that to the user, so they know that the check did not in fact run properly.\n\nTo us it\u0027s important to distinguish between ERROR (a negative signal for the CL) and INFRA_FAILURE (lack of signal for the CL).",
      "range": {
        "startLine": 131,
        "startChar": 2,
        "endLine": 131,
        "endChar": 20
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d643a8b4_56e7968a",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 131,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-09-01T14:37:45Z",
      "side": 1,
      "message": "Wouldn\u0027t a tag suffice?\n\nnegative signal from CI:\n  category: Error\n  tags: []\n\nlack of signal from CI:\n  category: Error\n  tags: [\"infra-failure\"]",
      "parentUuid": "8ada197c_cfbd6a70",
      "range": {
        "startLine": 131,
        "startChar": 2,
        "endLine": 131,
        "endChar": 20
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d1dc58d_af6b96fd",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 131,
      "author": {
        "id": 1002560
      },
      "writtenOn": "2020-09-01T14:45:23Z",
      "side": 1,
      "message": "We use different colors to make this explicit to the user, as we think it\u0027s important to notify them that the system is *not behaving as intended* and its output is (potentially transitively) non-deterministic.\n\nWe use red for error, purple for infra failure. Would a tag make this possible?\n\nThat said I don\u0027t have a strong opinion.",
      "parentUuid": "d643a8b4_56e7968a",
      "range": {
        "startLine": 131,
        "startChar": 2,
        "endLine": 131,
        "endChar": 20
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e0a5187_ead14ef4",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 131,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2020-09-01T14:54:16Z",
      "side": 1,
      "message": "See line 175-179 below.",
      "parentUuid": "8d1dc58d_af6b96fd",
      "range": {
        "startLine": 131,
        "startChar": 2,
        "endLine": 131,
        "endChar": 20
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0ef9280_48e968c8",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 131,
      "author": {
        "id": 1002560
      },
      "writtenOn": "2020-09-01T16:08:06Z",
      "side": 1,
      "message": "Thanks, I hadn\u0027t read well enough.",
      "parentUuid": "5e0a5187_ead14ef4",
      "range": {
        "startLine": 131,
        "startChar": 2,
        "endLine": 131,
        "endChar": 20
      },
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7efa7f74_f0d9e741",
        "filename": "pages/design-docs/ci-reboot/solution-ci-results-tab.md",
        "patchSetId": 4
      },
      "lineNbr": 218,
      "author": {
        "id": 1002560
      },
      "writtenOn": "2020-09-01T14:23:11Z",
      "side": 1,
      "message": "I\u0027d like to propose an additional field \"estimatedFinishTimestamp?: Date;\".\n\nI\u0027m fine with adding this in a follow up, writing this here for posterity. As such I\u0027m marking it immediately as Resolved.\n\nRationale:\n\n- A run may be pending for a while. The duration it\u0027s pending is a function on the instantaneous workload on the CI and the scheduling algorithm used by the workload scheduler (LIFO vs FIFO, priorities, etc). Only the scheduler can estimate the pending duration.\n\n- A task may have a quantifiable expected duration based on historical data. The expected duration may be bimodal (early exit versus full run). As such, a simple mechanism like taking the median or average runtime in the past day is likely not sufficient and a light but still deeper analysis has to be done.\n\n- The expected finish time is the sum of the pending time and the expected \"long duration\". We want to present a worst case to to users, and \"surprise the user\" with better efficiency than the advertized worst case. Only the CI scheduler has enough data, an holistic view of the system to make such estimation.\n\n- The expected finish time may be updated over time, as new information arrives to the CI Run scheduler. Maybe the check finished early (e.g. we skip tests for markdown-only CLs). Maybe the number of available workers abruptly lowered, or on the reverse an SREs killed hung tasks, freeing up resources.\n\n- At the presentation layer, we don\u0027t need to present every single ETA for each Run by default, only the worse value (most far ahead in the future). This can be as simple as: \"Checks are expected to be done in XX minute\", here XX is \"estimatedFinishTimestamp-now()\". This gives a hint to the user about instantaneous workload (pending duration) and set expectations (I have time to make coffee vs I have time to go to lunch vs let\u0027s check again tomorrow ðŸ¤·).\n\n- Using timestamps instead of relative time in seconds makes the data resilient in skews in information propagation.\n\n- Since the UX may make an active a choice on how to present the data, it needs to be structured (vs just a string in summary).",
      "revId": "ba27a264a94827cdf42bec36d721fdc53d50e286",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}