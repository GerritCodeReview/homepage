{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bc9774ab_bc1d82b4",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-05T19:34:06Z",
      "side": 1,
      "message": "I think what you are describing is the desire to write software that supports more than one older schema at a time, as supporting future schemas is unlikely without upgrading your users.",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b8961e3_2882ee67",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-04-06T10:20:57Z",
      "side": 1,
      "message": "Luca told me this was related to the idea to use protobuf in the event-stream.\n\nWhile I am generally supportive of that idea, I think it wouldn\u0027t address the problems you are citing.\n\nIn general, we don\u0027t want to rename fields or change their types, not because this makes rolling upgrades harder, but because it breaks all clients that connect to the server. We already try to not break them by making changes in a backward compatible way.\n\nWith protobuf, you get\n\n* cross-language bindings\n* immutable Java datastructures (assuming we\u0027re not using nanoproto)\n* performant binary serialization\n* unknown fields that survive (de)serialization\n* decoupling of binary format and data-structures (allowing renames, and switching between singular and repeated fields)\n\nthese are valuable properties, but I don\u0027t see how these relate this the problem you\u0027re trying to solve.",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 76
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b485e9c_bb353f3a",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-06T13:07:40Z",
      "side": 1,
      "message": "Yes, this is about using protobuf as a serialisation framework for Gerrit Events(not only for stream events). I didn\u0027t want to mention the solution in this part of the proposal.\n\n\u003e In general, we don\u0027t want to rename fields or change their types, not because this makes rolling upgrades harder, but because it breaks all clients that connect to the server. We already try to not break them by making changes in a backward compatible way.\n\nThe idea is that for existing clients we want to keep the same JSON format. But new clients could use ProtoBuf. Even with protobuf we have to be careful with schema changes but it will give us much more flexibility comparing to pure JSON. \n\nhttps://developers.google.com/protocol-buffers/docs/proto3#updating\n\nI understand that removing fields is controversial because all clients need to be able to handle this situation( they will get default value instead of the real one). But fields renaming should be fine. Protobuf uses field id instead of the field name so rename operation is safe.",
      "parentUuid": "8b8961e3_2882ee67",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 76
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "055e0be8_87de4177",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-04-06T17:09:38Z",
      "side": 1,
      "message": "\u003e Even with protobuf we have to be careful with schema changes but it will give us much more flexibility comparing to pure JSON. \n\nif you start supporting both protobuf *and* json separately, that will double the amount of machinery that we have to maintain. Also, there is a risk that the JSON and PB API will start to diverge in subtle ways. This is what you want (\"flexibility\"), but this is confusing to users, and also causes extra work (documentation!) Is that really what we want? \n\nWhen we were at Google thinking about protobufs, the plan was to use protobuf internally, and then generate JSON from the internal protobuf representation. This provides \n\n* language bindings\n* immutable java data structures\n\nbut it constrains the protobuf data type, because it has to move exactly in concert with the JSON types.",
      "parentUuid": "0b485e9c_bb353f3a",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 76
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7efa2f6_80128b1b",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2021-04-09T08:31:48Z",
      "side": 1,
      "message": "My premises (which might be faulty) is that:\n1. protobuf basically handle two things:\n   * Specification\n   * Serialization/Deserialization\n2. protbuf supports automatic generation of documentation (?)\n3. Event structure is specified with protobuf, Gerrit core only uses protobuf for serialization/deserialization.\n4. The event-structure is ~constant within stable branches.\n\nIf this is correct (which it might as well isn\u0027t) shouldn\u0027t it be a matter of:\n* Define all event types with protobuf .\n* Core Gerrit only deals with protobuf for serialization.\n* As part of generating Documentation we generate documentation of the \"event-structure\" as well.\n\n* Plugins (f.i. rabbitmq, kafka) may serialize the events to JSON instead of protobuf if they so choose.\n* Plugins that expose the events as JSON could opt to generate JSON-versions of the event documentation themselves (perhaps a generate-json-events-documentation plugin that they all inherit from).\n* For backwards compatibility a \"ssh-stream-events\" plugin that serializes the events to JSON should do the trick.\n\nWith a clear protobuf specification we should be able to more-or-less do a diff between f.i. 3.7 and 3.8 to get a clear picture of what changed between the major versions.",
      "parentUuid": "055e0be8_87de4177",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 76
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "277ba695_56b286fd",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-03T01:42:28Z",
      "side": 1,
      "message": "workarounded",
      "range": {
        "startLine": 19,
        "startChar": 48,
        "endLine": 19,
        "endChar": 58
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3b78ca5_a08e4273",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-04-05T20:38:53Z",
      "side": 1,
      "message": "I think \"worked around\" is what you\u0027re looking for.",
      "parentUuid": "277ba695_56b286fd",
      "range": {
        "startLine": 19,
        "startChar": 48,
        "endLine": 19,
        "endChar": 58
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f0fa7ed_81dce679",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-06T07:57:29Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "e3b78ca5_a08e4273",
      "range": {
        "startLine": 19,
        "startChar": 48,
        "endLine": 19,
        "endChar": 58
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a19a9c1c_82080c41",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-06T13:07:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3b78ca5_a08e4273",
      "range": {
        "startLine": 19,
        "startChar": 48,
        "endLine": 19,
        "endChar": 58
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da38c911_08cc7d08",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-04-06T10:20:57Z",
      "side": 1,
      "message": "Are you sure that this is really the problem? You\u0027re implying that the size of the JSON payloads saturates the SSH connection, which on my laptop does ~50M/sec. You can send a lot of JSON in 50 mbyte / second.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 83
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4711c8a8_da3a3768",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-05T19:34:06Z",
      "side": 1,
      "message": "This is a strange thing to put in this doc, as it seems unrelated to everything else and is not mentioned as a use case to improve?",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0df68e5d_3d083415",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-06T07:57:29Z",
      "side": 1,
      "message": "I believe Marcin mentions the reduction of the payload size, do you find this a strange requirement?",
      "parentUuid": "4711c8a8_da3a3768",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15578f93_f5c6839c",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-06T13:07:40Z",
      "side": 1,
      "message": "Exactly, I wanted to point out that current solution is verbose and can caused and issue for large setups",
      "parentUuid": "0df68e5d_3d083415",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1afb3850_a8596ef6",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2021-04-08T20:21:08Z",
      "side": 1,
      "message": "Probably we are either trying to tackle 2 different issues, i.e.: events forward/backward compatibility and events payload dimension, or maybe we need to clarify the reduction of the \"payload size\" might be a by-product of addressing the main issue.",
      "parentUuid": "15578f93_f5c6839c",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70e436c8_ba655efa",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-10T02:51:21Z",
      "side": 1,
      "message": "Not really IMHO, they are linked together though:\n\n*IF* you move to a binary format, then you *HAVE TO* introduce a schema, otherwise you don\u0027t know how to deserialise the data.\n\nP.S. Bear in mind that with the current JSON format, the majority of the payload is clutter. We could have 60-70% payload reduction IMHO.",
      "parentUuid": "1afb3850_a8596ef6",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9c45ade_2db8ab7f",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-05T19:34:06Z",
      "side": 1,
      "message": "I don\u0027t think this is fundamental to that use case. I believe the use cases in this section are all specific to the rolling upgrades use case? I think that MP is perhaps fundamental to rolling upgrades, but the other way around is not true.",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55ad5d46_e825daa7",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-06T07:57:29Z",
      "side": 1,
      "message": "I believe the compatibility is the major use-case, whilst the HA and MS are secondary effects or can be seen as a reason why we need a defined schema and associated compatibility definition and check.",
      "parentUuid": "a9c45ade_2db8ab7f",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcacd2c5_a5345713",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-06T13:07:40Z",
      "side": 1,
      "message": "Yes, the compatibility is the main use-case. HA and MS are the simplest use-cases to describe what we want to achieve",
      "parentUuid": "55ad5d46_e825daa7",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b5b3b52_6c538f2e",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-04-04T09:54:29Z",
      "side": 1,
      "message": "nit: s/As a by product/As a product/ ?",
      "range": {
        "startLine": 40,
        "startChar": 17,
        "endLine": 40,
        "endChar": 33
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e942eb6_9d9306ab",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-06T13:07:40Z",
      "side": 1,
      "message": "https://en.wikipedia.org/wiki/By-product",
      "parentUuid": "7b5b3b52_6c538f2e",
      "range": {
        "startLine": 40,
        "startChar": 17,
        "endLine": 40,
        "endChar": 33
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "400a228e_f9fceb89",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-04-04T09:54:29Z",
      "side": 1,
      "message": "nit: two whitespaces",
      "range": {
        "startLine": 42,
        "startChar": 45,
        "endLine": 42,
        "endChar": 47
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27a9ad15_397c0210",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-06T13:07:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "400a228e_f9fceb89",
      "range": {
        "startLine": 42,
        "startChar": 45,
        "endLine": 42,
        "endChar": 47
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "656c29b3_594bb998",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-05T19:34:06Z",
      "side": 1,
      "message": "This sounds like an AC, not a use case.",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21e80db1_6c9f5bec",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-04-05T20:38:53Z",
      "side": 1,
      "message": "This seems like an overly broad statement. If you delete fields from the event that the integration relies upon, we would very much expect it to break, correct? Can you narrow this to (a) more specific use case(s)?",
      "range": {
        "startLine": 45,
        "startChar": 20,
        "endLine": 46,
        "endChar": 16
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "475a3db4_c634bb01",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-05T19:34:06Z",
      "side": 1,
      "message": "Sounds like a solution",
      "range": {
        "startLine": 48,
        "startChar": 34,
        "endLine": 48,
        "endChar": 56
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae21ce04_85fee543",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2021-04-08T20:21:08Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "475a3db4_c634bb01",
      "range": {
        "startLine": 48,
        "startChar": 34,
        "endLine": 48,
        "endChar": 56
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bde6f45_5212921f",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-10T02:51:21Z",
      "side": 1,
      "message": "Why not replacing \"schema\" with \"contract\" instead?",
      "parentUuid": "ae21ce04_85fee543",
      "range": {
        "startLine": 48,
        "startChar": 34,
        "endLine": 48,
        "endChar": 56
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7de067de_0d4b9f25",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-05T19:34:06Z",
      "side": 1,
      "message": "Can you give an example of what this means to you, because I suspect \"easy\" means different things to different people?",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d305fd51_11927732",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-04-05T20:38:53Z",
      "side": 1,
      "message": "This doesn\u0027t describe a problem or use case that isn\u0027t already solved. I think you can are hinting at a problem (maybe those integrations are fragile?), but I have to guess currently.",
      "range": {
        "startLine": 48,
        "startChar": 3,
        "endLine": 49,
        "endChar": 50
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "332a68d3_7a7a1daa",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-06T13:07:40Z",
      "side": 1,
      "message": "Currently each client has to implement it\u0027s own domain classes when deserializing Gerrit Events. With events schema this code can be generated. If you check the most popular schema evolution frameworks(ProtoBuf, Avro, Thrift) they all supports that. For example ProtoBuf can generate domain classes from the schema for:\nC++, Java (including JavaNano, a dialect intended for low-resource environments), Python, Go, Ruby, Objective-C, C#, JavaScript, Ballerina, C, Dart, Elixir, Erlang, Haskell, Perl, PHP, R, Rust, Scala, Swift, Julia and Nim.\n\nI didn\u0027t want to give more details to avoid suggesting the solution.",
      "parentUuid": "7de067de_0d4b9f25",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e3e961a_fbd1701e",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-05T19:34:06Z",
      "side": 1,
      "message": "Here is an example of where you are specifying a solution as a use case, yet that use case is NOT inherently met by that solution \"having events schema\". If you want to support code generation, then I think it should be in your AC (but not \"schema\").",
      "range": {
        "startLine": 51,
        "startChar": 44,
        "endLine": 51,
        "endChar": 51
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43c1fbe9_b429aa0d",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-04-05T20:38:53Z",
      "side": 1,
      "message": "Can you describe the use cases where this kind of manual coding is happening currently? (or if none exist yet, where you think it would be needed)",
      "range": {
        "startLine": 52,
        "startChar": 53,
        "endLine": 52,
        "endChar": 86
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b398c258_98c369fb",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-06T13:07:40Z",
      "side": 1,
      "message": "For example if you check https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/server/events/EventGsonProvider.java it has few type adapters like EventDeserializer. So if someone wants to deserialize the event he needs to be aware of that custom logic.",
      "parentUuid": "43c1fbe9_b429aa0d",
      "range": {
        "startLine": 52,
        "startChar": 53,
        "endLine": 52,
        "endChar": 86
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3afc03c_08defc6b",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-04-06T15:26:14Z",
      "side": 1,
      "message": "Ok. Is Gerrit duplicating that logic in multiple areas? Are any applications other than Gerrit doing that? If no to both, I\u0027m still confused as to what the \"problem\" is that you\u0027re expressing here.",
      "parentUuid": "b398c258_98c369fb",
      "range": {
        "startLine": 52,
        "startChar": 53,
        "endLine": 52,
        "endChar": 86
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61c2171b_36ac49bd",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-04-04T09:54:29Z",
      "side": 1,
      "message": "nit: s/well-know/well-known/",
      "range": {
        "startLine": 56,
        "startChar": 33,
        "endLine": 56,
        "endChar": 42
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81ff6217_ef6e281b",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-05T19:34:06Z",
      "side": 1,
      "message": "Some of the criteria here seem to be dictating a solution (having a schema). It is best to word ACs as behavior you want to be able to support instead of implementations that you want. Otherwise the solution might provide the implementation that you specified and still not provide the behavior that you are seeking.",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58f32486_4167491d",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-04-05T20:38:53Z",
      "side": 1,
      "message": "What defines a well-known standard?",
      "parentUuid": "61c2171b_36ac49bd",
      "range": {
        "startLine": 56,
        "startChar": 33,
        "endLine": 56,
        "endChar": 42
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bfe0cfc_00a3cfb2",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-06T13:07:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58f32486_4167491d",
      "range": {
        "startLine": 56,
        "startChar": 33,
        "endLine": 56,
        "endChar": 42
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6767385c_974c4704",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-05T19:34:06Z",
      "side": 1,
      "message": "Forward compatibility is unlikely to be achievable 100%, so you may want to specify what sorts of changes you expect to be forward compatible.\n\nYou probably want to specify how far back you expect backward compatibility to go, i.e. I don\u0027t suspect you will support Gerrit 2.7?",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c75aca5_53a9f5cf",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-06T13:07:40Z",
      "side": 1,
      "message": "\u003e You probably want to specify how far back you expect backward compatibility to go, i.e. I don\u0027t suspect you will support Gerrit 2.7?\n\nThis is a new functionality so I believe it should be added on the master branch and be included in the next release.\n\n\u003e Forward compatibility is unlikely to be achievable 100%, so you may want to specify what sorts of changes you expect to be forward compatible.\n\nI don\u0027t want to discuss solution or technology here but if you look on the market standard technologies for schema evolution like ProtoBuf, Avro or Thrift they support almost the same backward/forward compatibility. Good comparison can be found here: https://martin.kleppmann.com/2012/12/05/schema-evolution-in-avro-protocol-buffers-thrift.html",
      "parentUuid": "6767385c_974c4704",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1deebf9_65b92a62",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-03T01:42:28Z",
      "side": 1,
      "message": "reasons",
      "range": {
        "startLine": 59,
        "startChar": 54,
        "endLine": 59,
        "endChar": 60
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "729d433c_b1879574",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-05T19:34:06Z",
      "side": 1,
      "message": "This and the bullet below seems to assume a solution with two streams?",
      "parentUuid": "a1deebf9_65b92a62",
      "range": {
        "startLine": 59,
        "startChar": 54,
        "endLine": 59,
        "endChar": 60
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e576ec0d_2dddc947",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-04-04T09:54:29Z",
      "side": 1,
      "message": "nit: selects in which format events should be generated.",
      "range": {
        "startLine": 60,
        "startChar": 36,
        "endLine": 61,
        "endChar": 23
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c467378_811845c6",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-06T13:07:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e576ec0d_2dddc947",
      "range": {
        "startLine": 60,
        "startChar": 36,
        "endLine": 61,
        "endChar": 23
      },
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70b5e056_0ae16c68",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-03T01:42:28Z",
      "side": 1,
      "message": "+ The format should be independent from the transport, allowing the same format to be reused across different channels:\n- SSH stream events\n- Webhooks\n- Other pub-sub events broker (e.g. RabbitMQ, Kafka, Kinesis, GCloud, others)",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "093949fe_f3034f94",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-04-05T22:46:49Z",
      "side": 1,
      "message": "\u003e + The format should be independent from the transport, allowing the same format to be reused across different channels:\n\u003e - SSH stream events\n\u003e - Webhooks\n\u003e - Other pub-sub events broker (e.g. RabbitMQ, Kafka, Kinesis, GCloud, others)\n\nI am glad that the use case is limited to events, as this helps focus things. I do think it would also make sense to suggest that it would be good if any solution provided to make rolling upgrades easier could also apply to other Gerrit interfaces such as the RestAPIs.",
      "parentUuid": "70b5e056_0ae16c68",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "576c891f_50e7c522",
        "filename": "pages/design-docs/events-compatibility/use-cases.md",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2021-04-06T13:07:40Z",
      "side": 1,
      "message": "I agree with @Luca  this design doc is not focusing on the events stream but it\u0027s trying to provide generic format for all channels.",
      "parentUuid": "093949fe_f3034f94",
      "revId": "cf39454840fb5a8449726af0a859f16ea8378e76",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}