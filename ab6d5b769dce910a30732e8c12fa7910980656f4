{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "65b7ba1c_fbd315c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-07T20:39:37Z",
      "side": 1,
      "message": "@kaushik.lingarkar@linaro.org feel free to propose a different wordings in the notes.",
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7dc518d_a845b5ae",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-07T23:24:34Z",
      "side": 1,
      "message": "This might be misleading? Any ref-updates done in that thread are updated in the per request cache. Is that what you meant? Maybe you have a specific example you can share where you saw this cause a problem? We might just have a bug in the JGit side that we would want to fix.",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad995f11_21da2741",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-07T23:31:10Z",
      "side": 1,
      "message": "\u003e This might be misleading? Any ref-updates done in that thread are updated in the per request cache.\n\nTrue, but the other threads are unaware of the refs updated and therefore may have stale data. It\u0027s a concurrency trade-off to pay.\n\n\u003e Is that what you meant? Maybe you have a specific example you can share where you saw this cause a problem?\n\nExample: two threads T1 and T2 are updating the same ref. T1 wants to update from S0 to S1 and T2 wants to update from S0 to S2. If they are executed concurrently, they are both successful because they use a thread-local cached snapshot of the ref-db.\n\n\u003e  We might just have a bug in the JGit side that we would want to fix.\n\nI don\u0027t believe there is any bug: from what I see this is the way is supposed to work. I do not see any eviction logic or notification across threads. Do you have any pointers?\n\nWe had a production issue on GerritHub.io and we had to disable this mechanism because different threads were using stale ref-db data. After we disabled this mechanism everything went back as it was before.\n\nI don\u0027t believe this is an issue for all setups, but it was for us. It is worth to communicate to the Gerrit admin that he has to make a decision because the way refs are cached is changing in v3.8.0.\n\nP.S. Even for me it wasn\u0027t obvious enough that I needed to analyse careful the setting and make a decision about it ... and I wrote the release notes ðŸ˜Š",
      "parentUuid": "a7dc518d_a845b5ae",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85c5f33c_3aca7e84",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-08T00:30:19Z",
      "side": 1,
      "message": "\u003e \u003e This might be misleading? Any ref-updates done in that thread are updated in the per request cache.\n\u003e \n\u003e True, but the other threads are unaware of the refs updated and therefore may have stale data. It\u0027s a concurrency trade-off to pay.\n\nYes, but only for the lifetime of each thread. A new thread doesn\u0027t use the cached data. A thread lifetime is typically short enough that seeing updated data mid-lifetime could be considered a negative (i.e. it shows inconsistent results).\n\n\u003e \n\u003e \u003e Is that what you meant? Maybe you have a specific example you can share where you saw this cause a problem?\n\u003e \n\u003e Example: two threads T1 and T2 are updating the same ref. T1 wants to update from S0 to S1 and T2 wants to update from S0 to S2. If they are executed concurrently, they are both successful because they use a thread-local cached snapshot of the ref-db.\n\nNo no. If you saw that happen that that\u0027s 100% a bug somewhere. The ref\u0027s value must be read *after* acquiring a lock on the ref. That\u0027s very strict in the git ref db contract. Do you have a specific example of this happening?\n\nThe only way I know this can happen (with or without the per request cache enabled) is due to NFS caching. Martin started working on a fix that I then took over [1], but I haven\u0027t had time to pick it back up yet.\n\n[1] 205141: Make SnapshottingRefDirectory refresh looseRef dirs | https://git.eclipse.org/r/c/jgit/jgit/+/205141\n\n\u003e \n\u003e \u003e  We might just have a bug in the JGit side that we would want to fix.\n\u003e \n\u003e I don\u0027t believe there is any bug: from what I see this is the way is supposed to work. I do not see any eviction logic or notification across threads. Do you have any pointers?\n\nThere isn\u0027t, but I don\u0027t believe there needs to be to prevent user-facing errors. There is eviction logic for failures within a thread, so if a ref update fails, the cached value is evicted and will be re-read on a retry.\n\n\u003e \n\u003e We had a production issue on GerritHub.io and we had to disable this mechanism because different threads were using stale ref-db data. After we disabled this mechanism everything went back as it was before.\n\nI was hoping for specifics on an incident like this. Can you share which threads (what API/etc they were) and in what way they were stale? I didn\u0027t/don\u0027t anticipate this feature creating any production issues like you describe.\n\n\u003e \n\u003e I don\u0027t believe this is an issue for all setups, but it was for us. It is worth to communicate to the Gerrit admin that he has to make a decision because the way refs are cached is changing in v3.8.0.\n\nDo you think there\u0027s anything special about your setup that could otherwise explain this issue? Do you have other plugins/libs/infra that could also affect ref db behavior?",
      "parentUuid": "ad995f11_21da2741",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dac5e61f_21ee59ca",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-11-10T18:00:03Z",
      "side": 1,
      "message": "Considering that it seems that it is not documented (NFS. looseRefs) when it could not work perhaps we should have it disabled by default?\n\nHere is a change to disable it for the time being (at least to the moment where failure conditions are well described):\nhttps://gerrit-review.googlesource.com/c/gerrit/+/392480\n\nWDYT?",
      "parentUuid": "85c5f33c_3aca7e84",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "981218a1_f2949a65",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-10T18:08:13Z",
      "side": 1,
      "message": "\u003e Considering that it seems that it is not documented (NFS. looseRefs) when it could not work perhaps we should have it disabled by default?\n\nI think you missed this important part:\n\n\u003e\u003e (with or without the per request cache enabled) \n\nThis is not a new issue introduced with the per request ref cache.\n\n\u003e \n\u003e Here is a change to disable it for the time being (at least to the moment where failure conditions are well described):\n\nI have seen no well described failure conditions. I asked for them in my reply a few days ago, but there\u0027s no response to those questions yet. I\u0027m going to -1 this until there\u0027s clarification on those.\n\n\u003e https://gerrit-review.googlesource.com/c/gerrit/+/392480\n\u003e \n\u003e WDYT?\n\nLooks premature. We\u0027re using this in production for a VERY large, VERY busy instance since August 19th and we\u0027re not seeing any issues related to the per request ref cache.",
      "parentUuid": "dac5e61f_21ee59ca",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4e0f6a8_343a8c8e",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-11T01:22:53Z",
      "side": 1,
      "message": "\u003e Yes, but only for the lifetime of each thread. A new thread doesn\u0027t use the\n\u003e cached data. A thread lifetime is typically short enough that seeing updated data\n\u003e mid-lifetime could be considered a negative (i.e. it shows inconsistent results).\n\nWell, that depends on what the thread does, isn\u0027t it? Bear in mind that there are also two _unknowns_ on the lifetime of a thread:\n\n1. The thread continues when the events listeners are called: you aren\u0027t really sure what the listeners will do and how long would they take.\n2. Some of the threads are performing operations that are inherently long to execute (e.g. Git GC)\n\nI saw the reloading mechanism work in *some cases*, but you aren\u0027t really sure that those are all the cases possible. I don\u0027t believe Gerrit test coverage is enough for assuring that everything would be consistent anyway and during concurrent operations.\n\nLast but not least, most of Gerrit tests are not using the `@UseLocalDisk` annotation, hence would not use the thread-local cache of the refdb. We cannot really say that the mechanism is well tested so far. I would keep the feature enabled, but I warning to the Gerrit admin is a duty of care from my role.\n\n\u003e No no. If you saw that happen that that\u0027s 100% a bug somewhere.\n\u003e The ref\u0027s value must be read after acquiring a lock on the ref.\n\u003e That\u0027s very strict in the git ref db contract. Do you have a specific example of this happening?\n\nA simple example is the following:\n\n- Client 1 runs:\n\n```\nfor (( i\u003d0; i\u003c10000; i++ )); do echo $i \u003e\u003e foo.txt; git add foo.txt; git commit -m foo-$i; git push origin master; done\n```\n\n- Client 2 runs:\n\n```\nfor ((i\u003d0; i\u003c100; i++))\ndo\ncurl -n \u0027http://localhost:8080/a/projects/test-repo/gc\u0027 \\\n  -X \u0027POST\u0027\ndone\n```\n\nAfter a few minutes, the repository is corrupted:\n\n```\n git fsck\nChecking object directories: 100% (256/256), done.\nChecking objects: 100% (1773/1773), done.\nerror: refs/heads/master: invalid sha1 pointer a288a8956d91a2638adfa9ccc5eef21c6aaed2c0\nerror: HEAD: invalid sha1 pointer a288a8956d91a2638adfa9ccc5eef21c6aaed2c0\nerror: refs/heads/master: invalid reflog entry a288a8956d91a2638adfa9ccc5eef21c6aaed2c0\nbroken link from    tree 7fa528e0018128b1a65a31021deb651f7d867c12\n              to    blob 8d2ef2542fa78620336148ba51653b545d9dafd0\nmissing blob 8d2ef2542fa78620336148ba51653b545d9dafd0\n```\n\n- Client 1 pushes are failing with `Missing delta base xxxx` and many other errors.\n- Client 2 sees GC failing.\n\nOn GerritHub.io we had many split-brains alerts saying that some threads were attempting to update refs that were potentially in split-brain and misaligned with the global-refdb.\n\n\u003e I have seen no well described failure conditions.\n\nI did not see this change on Gerrit stable-3.5 branch, are you guys running this code in production? The failures are happening for us when there is concurrency and I managed to easily reproduce it locally (see the above scripts).\n\nThis isn\u0027t an issue for us anymore as we found the root cause and disabled the thread-local ref-db snapshotting. However, I believe we have the duty to make the Gerrit admin aware of the risks of enabling this performance optimisation.\nThen the Gerrit admin will decide how to proceed.",
      "parentUuid": "981218a1_f2949a65",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "088386df_689c1d5d",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-11T01:40:59Z",
      "side": 1,
      "message": "Adding the `core.usePerRequestRefCache \u003d false` to `gerrit.config` resolved the concurrent issues between pushes and GC: I could leave the test running and all operations are successful and the repository isn\u0027t corrupted anymore.",
      "parentUuid": "c4e0f6a8_343a8c8e",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9840689_d781bf55",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-11T01:46:41Z",
      "side": 1,
      "message": "Marking this as resolved as:\n- Provided two example of inconsistencies\n- Provided a real-life script for reproducing the issue with a vanilla Gerrit without any other component",
      "parentUuid": "088386df_689c1d5d",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30be4cc8_a33eab6a",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-11T02:19:45Z",
      "side": 1,
      "message": "\u003e After a few minutes, the repository is corrupted:\n\nI admit, we didn\u0027t test GC from within Gerrit, so there could be something bad there we didn\u0027t catch, but assuming other configuration is sane, that would definitely be a bug. I completely agree that disabling at least for your setup is a good idea until that\u0027s understood.\n\nI\u0027ll try to get some time to debug why GC is doing something bad, but at a quick glance, we should probably have SnapshottingRefDirectory override pack() and call invalidateSnapshot() before calling the super method.\n\nI\u0027m un-resolving because I still argue that this isn\u0027t a breaking change, it\u0027s a bug. The bug should be fixed. If you want to add a warning about this feature being new and that it has had bug(s) reported against it, that feels more appropriate than calling it a Breaking Change.\n\n\u003e On GerritHub.io we had many split-brains alerts saying that some threads were attempting to update refs that were potentially in split-brain and misaligned with the global-refdb.\n\nSorry, that really sucks. We didn\u0027t test any global-refdb implementations, so I don\u0027t know how those would interact with it.\n\n\u003e I did not see this change on Gerrit stable-3.5 branch, are you guys running this code in production?\n\nYes, we backported this to our 3.5 branch that we have for feature backports that we don\u0027t think are appropriate for upstream stable branches. We\u0027ve been running it there since Aug 19th and we had it in our stress testing since March without issues.",
      "parentUuid": "c9840689_d781bf55",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "189b1cdc_fa30df68",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-11T02:47:51Z",
      "side": 1,
      "message": "\u003e I\u0027ll try to get some time to debug why GC is doing something bad, but at a quick glance, we should probably have SnapshottingRefDirectory override pack() and call invalidateSnapshot() before calling the super method.\n\nI looked at the JGit side more and I was wrong, I don\u0027t see any issues with the current code. What JGit configs do you have for your setup? Did you repro this on NFS or a local disk?",
      "parentUuid": "30be4cc8_a33eab6a",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7408c4b_2ee71920",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-11T11:50:31Z",
      "side": 1,
      "message": "\u003e I\u0027m un-resolving because I still argue that this isn\u0027t a breaking change,\n\u003e it\u0027s a bug.\n\nAck, I\u0027ve amended the change and introduced the \"Known issues\" section, adding also another issue that is causing Gerrit to show a blank page.\n\n\u003e The bug should be fixed. If you want to add a warning about this feature being new and that it has had bug(s) reported against it, that feels more appropriate than calling it a Breaking Change.\n\nDone, it is a \"Known Issue\" which I believe that is fully ack by everyone at this stage.",
      "parentUuid": "189b1cdc_fa30df68",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8affe79e_e305abed",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-11T12:02:55Z",
      "side": 1,
      "message": "\u003e I looked at the JGit side more and I was wrong, I don\u0027t see any issues with the\n\u003e current code. What JGit configs do you have for your setup?\n\u003e Did you repro this on NFS or a local disk?\n\nCan you please follow-up on the associated Issue 309098227? There are all the steps for reproducing the problem and the logs observed. I believe it is the most appropriate place to discuss all these details.",
      "parentUuid": "a7408c4b_2ee71920",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}