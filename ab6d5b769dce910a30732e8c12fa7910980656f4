{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "65b7ba1c_fbd315c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-07T20:39:37Z",
      "side": 1,
      "message": "@kaushik.lingarkar@linaro.org feel free to propose a different wordings in the notes.",
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7dc518d_a845b5ae",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-07T23:24:34Z",
      "side": 1,
      "message": "This might be misleading? Any ref-updates done in that thread are updated in the per request cache. Is that what you meant? Maybe you have a specific example you can share where you saw this cause a problem? We might just have a bug in the JGit side that we would want to fix.",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad995f11_21da2741",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-07T23:31:10Z",
      "side": 1,
      "message": "\u003e This might be misleading? Any ref-updates done in that thread are updated in the per request cache.\n\nTrue, but the other threads are unaware of the refs updated and therefore may have stale data. It\u0027s a concurrency trade-off to pay.\n\n\u003e Is that what you meant? Maybe you have a specific example you can share where you saw this cause a problem?\n\nExample: two threads T1 and T2 are updating the same ref. T1 wants to update from S0 to S1 and T2 wants to update from S0 to S2. If they are executed concurrently, they are both successful because they use a thread-local cached snapshot of the ref-db.\n\n\u003e  We might just have a bug in the JGit side that we would want to fix.\n\nI don\u0027t believe there is any bug: from what I see this is the way is supposed to work. I do not see any eviction logic or notification across threads. Do you have any pointers?\n\nWe had a production issue on GerritHub.io and we had to disable this mechanism because different threads were using stale ref-db data. After we disabled this mechanism everything went back as it was before.\n\nI don\u0027t believe this is an issue for all setups, but it was for us. It is worth to communicate to the Gerrit admin that he has to make a decision because the way refs are cached is changing in v3.8.0.\n\nP.S. Even for me it wasn\u0027t obvious enough that I needed to analyse careful the setting and make a decision about it ... and I wrote the release notes ðŸ˜Š",
      "parentUuid": "a7dc518d_a845b5ae",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85c5f33c_3aca7e84",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-08T00:30:19Z",
      "side": 1,
      "message": "\u003e \u003e This might be misleading? Any ref-updates done in that thread are updated in the per request cache.\n\u003e \n\u003e True, but the other threads are unaware of the refs updated and therefore may have stale data. It\u0027s a concurrency trade-off to pay.\n\nYes, but only for the lifetime of each thread. A new thread doesn\u0027t use the cached data. A thread lifetime is typically short enough that seeing updated data mid-lifetime could be considered a negative (i.e. it shows inconsistent results).\n\n\u003e \n\u003e \u003e Is that what you meant? Maybe you have a specific example you can share where you saw this cause a problem?\n\u003e \n\u003e Example: two threads T1 and T2 are updating the same ref. T1 wants to update from S0 to S1 and T2 wants to update from S0 to S2. If they are executed concurrently, they are both successful because they use a thread-local cached snapshot of the ref-db.\n\nNo no. If you saw that happen that that\u0027s 100% a bug somewhere. The ref\u0027s value must be read *after* acquiring a lock on the ref. That\u0027s very strict in the git ref db contract. Do you have a specific example of this happening?\n\nThe only way I know this can happen (with or without the per request cache enabled) is due to NFS caching. Martin started working on a fix that I then took over [1], but I haven\u0027t had time to pick it back up yet.\n\n[1] 205141: Make SnapshottingRefDirectory refresh looseRef dirs | https://git.eclipse.org/r/c/jgit/jgit/+/205141\n\n\u003e \n\u003e \u003e  We might just have a bug in the JGit side that we would want to fix.\n\u003e \n\u003e I don\u0027t believe there is any bug: from what I see this is the way is supposed to work. I do not see any eviction logic or notification across threads. Do you have any pointers?\n\nThere isn\u0027t, but I don\u0027t believe there needs to be to prevent user-facing errors. There is eviction logic for failures within a thread, so if a ref update fails, the cached value is evicted and will be re-read on a retry.\n\n\u003e \n\u003e We had a production issue on GerritHub.io and we had to disable this mechanism because different threads were using stale ref-db data. After we disabled this mechanism everything went back as it was before.\n\nI was hoping for specifics on an incident like this. Can you share which threads (what API/etc they were) and in what way they were stale? I didn\u0027t/don\u0027t anticipate this feature creating any production issues like you describe.\n\n\u003e \n\u003e I don\u0027t believe this is an issue for all setups, but it was for us. It is worth to communicate to the Gerrit admin that he has to make a decision because the way refs are cached is changing in v3.8.0.\n\nDo you think there\u0027s anything special about your setup that could otherwise explain this issue? Do you have other plugins/libs/infra that could also affect ref db behavior?",
      "parentUuid": "ad995f11_21da2741",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dac5e61f_21ee59ca",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-11-10T18:00:03Z",
      "side": 1,
      "message": "Considering that it seems that it is not documented (NFS. looseRefs) when it could not work perhaps we should have it disabled by default?\n\nHere is a change to disable it for the time being (at least to the moment where failure conditions are well described):\nhttps://gerrit-review.googlesource.com/c/gerrit/+/392480\n\nWDYT?",
      "parentUuid": "85c5f33c_3aca7e84",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "981218a1_f2949a65",
        "filename": "pages/site/releases/3.8.md",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-11-10T18:08:13Z",
      "side": 1,
      "message": "\u003e Considering that it seems that it is not documented (NFS. looseRefs) when it could not work perhaps we should have it disabled by default?\n\nI think you missed this important part:\n\n\u003e\u003e (with or without the per request cache enabled) \n\nThis is not a new issue introduced with the per request ref cache.\n\n\u003e \n\u003e Here is a change to disable it for the time being (at least to the moment where failure conditions are well described):\n\nI have seen no well described failure conditions. I asked for them in my reply a few days ago, but there\u0027s no response to those questions yet. I\u0027m going to -1 this until there\u0027s clarification on those.\n\n\u003e https://gerrit-review.googlesource.com/c/gerrit/+/392480\n\u003e \n\u003e WDYT?\n\nLooks premature. We\u0027re using this in production for a VERY large, VERY busy instance since August 19th and we\u0027re not seeing any issues related to the per request ref cache.",
      "parentUuid": "dac5e61f_21ee59ca",
      "range": {
        "startLine": 195,
        "startChar": 53,
        "endLine": 196,
        "endChar": 47
      },
      "revId": "ab6d5b769dce910a30732e8c12fa7910980656f4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}