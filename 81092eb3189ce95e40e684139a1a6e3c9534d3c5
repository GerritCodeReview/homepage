{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "34d35655_6bdb7bc7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-03-17T14:23:23Z",
      "side": 1,
      "message": "Thanks everyone for all the great input so far. Much appreciated!",
      "revId": "81092eb3189ce95e40e684139a1a6e3c9534d3c5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04611345_273a29f0",
        "filename": "pages/design-docs/push-reviews/use-cases.md",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-03-17T19:08:46Z",
      "side": 1,
      "message": "It can also be done now through the Create Branch REST endpoint, assuming an empty initial commit already exists in the repo and is visible to the calling user.",
      "range": {
        "startLine": 95,
        "startChar": 30,
        "endLine": 95,
        "endChar": 41
      },
      "revId": "81092eb3189ce95e40e684139a1a6e3c9534d3c5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd52813d_a5eb328b",
        "filename": "pages/design-docs/push-reviews/use-cases.md",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-03-18T10:47:35Z",
      "side": 1,
      "message": "Right, I didn\u0027t think about this special case. Added a note about it.",
      "parentUuid": "04611345_273a29f0",
      "range": {
        "startLine": 95,
        "startChar": 30,
        "endLine": 95,
        "endChar": 41
      },
      "revId": "81092eb3189ce95e40e684139a1a6e3c9534d3c5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e27d3bd_16e8ff67",
        "filename": "pages/design-docs/push-reviews/use-cases.md",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-03-17T19:08:46Z",
      "side": 1,
      "message": "This probably (overly?) limits branch rewrites. Is that the intent?",
      "range": {
        "startLine": 106,
        "startChar": 61,
        "endLine": 107,
        "endChar": 39
      },
      "revId": "81092eb3189ce95e40e684139a1a6e3c9534d3c5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02f28282_0b7ad310",
        "filename": "pages/design-docs/push-reviews/use-cases.md",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-03-18T10:47:35Z",
      "side": 1,
      "message": "No, this is just to acknowledge that Gerrit does not scale indefinitely and there is some upper limit for the number of file diffs in a change that Gerrit can handle.This point is to ensure that pushes are rejected when this limit is exceeded, rather then allowing the push and then letting Gerrit fail at a later point in time.\n\nFWIW I think this may already be covered by the existing change.maxFiles setting [1] (default 100.000). So it will be up to the administrator to define which number is \u0027unreasonable\u0027.\n\nE.g. we want to prevent that a malicious user could create a push review for a commit that contains millions of random files in order to cause failures in Gerrit.\n\nI tried to make this intend clearer. Please let me know if you have a better idea how to phrase this.\n\n[1] https://gerrit-review.googlesource.com/Documentation/config-gerrit.html#change.maxFiles",
      "parentUuid": "8e27d3bd_16e8ff67",
      "range": {
        "startLine": 106,
        "startChar": 61,
        "endLine": 107,
        "endChar": 39
      },
      "revId": "81092eb3189ce95e40e684139a1a6e3c9534d3c5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb887b04_035fbcf7",
        "filename": "pages/design-docs/push-reviews/use-cases.md",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-03-18T14:50:44Z",
      "side": 1,
      "message": "Looks good.",
      "parentUuid": "02f28282_0b7ad310",
      "range": {
        "startLine": 106,
        "startChar": 61,
        "endLine": 107,
        "endChar": 39
      },
      "revId": "81092eb3189ce95e40e684139a1a6e3c9534d3c5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "141df2dd_b9d789d5",
        "filename": "pages/design-docs/push-reviews/use-cases.md",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-03-17T19:08:46Z",
      "side": 1,
      "message": "Do these already happen for direct updates? If not, it\u0027d be great to have that first.",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 123,
        "endChar": 36
      },
      "revId": "81092eb3189ce95e40e684139a1a6e3c9534d3c5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8ed1a01_26f8eec5",
        "filename": "pages/design-docs/push-reviews/use-cases.md",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-03-18T10:47:35Z",
      "side": 1,
      "message": "\u003e Do these already happen for direct updates?\n\nNo, I don\u0027t think so.\n\n\u003e Open changes show a conflict when a non-fast-forward push review has been submitted.\n\nI quickly tested this, and it seems the open change still returns submittable \u003d true after a direct non-fast-forward update was done that removed the base commit from the target branch history, but I got a failure when trying to submit the change.\n\n\u003e Uploads of commits that are based on commits ...\n\nI\u0027m pretty sure that these uploads are not rejected, unless the administrator takes care to ban the commits [1] that have been removed from the branch history manually (FWIW I think this use-case is the reason why banning commits is possible).\n\n[1] https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#ban-commit\n\n\u003e If not, it\u0027d be great to have that first.\n\nWe don\u0027t intent to invest into fixing this for direct updates since our goal is to disable direct updates so that this can no longer happen. But it\u0027s not unlikely that there will be some improvements here as result of implementing this for push reviews.",
      "parentUuid": "141df2dd_b9d789d5",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 123,
        "endChar": 36
      },
      "revId": "81092eb3189ce95e40e684139a1a6e3c9534d3c5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8da39cde_9aef6035",
        "filename": "pages/design-docs/push-reviews/use-cases.md",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-03-18T14:50:44Z",
      "side": 1,
      "message": "(just unresolving to ensure it\u0027s read, feel free to ack/resolve again)\n\n\u003e \u003e Open changes show a conflict when a non-fast-forward push review has been submitted.\n\u003e \n\u003e I quickly tested this, and it seems the open change still returns submittable \u003d true after a direct non-fast-forward update was done that removed the base commit from the target branch history, but I got a failure when trying to submit the change.\n\nI guess different values for [2] might change that \u0027submittable \u003d true\u0027 behavior?\n\n[2] https://gerrit-review.googlesource.com/Documentation/config-gerrit.html#change.mergeabilityComputationBehavior\n\n\u003e \n\u003e \u003e Uploads of commits that are based on commits ...\n\u003e \n\u003e I\u0027m pretty sure that these uploads are not rejected, unless the administrator takes care to ban the commits [1] that have been removed from the branch history manually (FWIW I think this use-case is the reason why banning commits is possible).\n\u003e \n\u003e [1] https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#ban-commit\n\nMakes sense. Hmm, but ban-commit applies to the whole repo. I\u0027m interpreting the acceptance criteria for the new behavior to be specific to only the updated branch. Is that correct?\n\n\u003e \n\u003e \u003e If not, it\u0027d be great to have that first.\n\u003e \n\u003e We don\u0027t intent to invest into fixing this for direct updates since our goal is to disable direct updates so that this can no longer happen. But it\u0027s not unlikely that there will be some improvements here as result of implementing this for push reviews.\n\nI understand. I think there\u0027s some low-hanging fruit (like perhaps improving ban-commit to have a branch-specific mode ^). I also expect there are plenty of Gerrit setups that will continue using direct updates, so it\u0027d be nice to improve those non-goal use cases too. We need a \"Nice to Have Use Cases\" section ðŸ˜Š",
      "parentUuid": "d8ed1a01_26f8eec5",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 123,
        "endChar": 36
      },
      "revId": "81092eb3189ce95e40e684139a1a6e3c9534d3c5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de164d18_7b3a6a04",
        "filename": "pages/design-docs/push-reviews/use-cases.md",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-03-21T11:05:48Z",
      "side": 1,
      "message": "\u003e \u003e \u003e Open changes show a conflict when a non-fast-forward push review has been\n\u003e \u003e \u003e submitted.\n\u003e \u003e I quickly tested this, and it seems the open change still returns submittable \u003d\n\u003e \u003e true after a direct non-fast-forward update was done that removed the base commit \n\u003e \u003e from the target branch history, but I got a failure when trying to submit the \n\u003e \u003e change.\n\u003e I guess different values for [2] might change that \u0027submittable \u003d true\u0027 behavior?\n\u003e \n\u003e [2] https://gerrit-review.googlesource.com/Documentation/config-gerrit.html#change.mergeabilityComputationBehavior\n\nI don\u0027t think this setting makes any difference here as this setting only controls when changes are reindexed to update the submittability flag in the change index data, but in my test I retrieved change details for a single change which should always compute submittability newly and not rely on the potentially stale index data.\n\n\u003e Makes sense. Hmm, but ban-commit applies to the whole repo. I\u0027m interpreting\n\u003e the acceptance criteria for the new behavior to be specific to only the\n\u003e updated branch. Is that correct?\n\nOh right, thanks for bringing this up. I agree this should be branch-specific which ban commit is currently not. Slightly rephrased this to make this clear.\n\n\u003e I understand. I think there\u0027s some low-hanging fruit (like perhaps\n\u003e improving ban-commit to have a branch-specific mode ^). I also expect\n\u003e there are plenty of Gerrit setups that will continue using direct updates,\n\u003e so it\u0027d be nice to improve those non-goal use cases too. We need a \"Nice\n\u003e to Have Use Cases\" section ðŸ˜Š\n\nGood idea to add such a section. Done.",
      "parentUuid": "8da39cde_9aef6035",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 123,
        "endChar": 36
      },
      "revId": "81092eb3189ce95e40e684139a1a6e3c9534d3c5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}