{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1497623715 -0400\nnonce AH5c86DRLz/Mji8cintFBvH9zBL/zDcqws8zZEYCcy31IHpl3tPQ7wmeWgqoVsby4cgjqDyegNZL\n\n0000000000000000000000000000000000000000 e7135289e4cf3e8f059a7120a96ae87b1be46857 refs/for/md-pages\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJZQ+yjAAoJEF/XxZqaEoiMSW4P/RDfpXbImUOYo5MkYFdz6X6r\nxbiQPwv1WAGwSWyKIUY35HSQ1hQkxD2iyefhlid/+pITce/MaTq6WSL2VFoMYuo8\nctiz/4JSEmbfx7xTTOccFxvKCmMs/W58IiT/HTJ3oeEdIAPEPzkCBkxOJfhbMiYd\n8QPAGqfCyax4h/wHa4ixK+HS+FBawF9Iq91Ofd3opG+V6gOQjKnbIEaBCzkJQ3BK\nhqzuiOfPe1CB7abmR3VvSEJ8EO4SbNYJsCXBG1Mg3KthU6ze+D6sUu8ebmPqnsUN\nqEnHdJOnsJY+tBxg3Kd3yTh8daR/pXqmpnNSCirdGn5FVkKc5rxG8+B+JAuEEbD/\nvbMjm8eDFbU6pjLqTKpK3zVupkZxg/HQlnx4m4uZrW2esAb43Zz25u1RVi8o49Qa\nKYIsn44d9RV6zWdSNi3HyrqXRdKcJ9VVOuE7fnudYuV8NiUHUfJz3t6/+q8vMXqZ\nTY5nrjsA7w2Q1quOhZOGxTCKfVItRGIByuM0iDQAZOmIT4a2tkS8DL4pEPHwDOOB\nCaR9YLhAIypE8/ms4cIpEeYCDc7g8DmiJsHT5Mr/B6CgRwq0ua4yyT/TXAZqXErv\nvH4G/PeHHOTFdZZ+vLfGAgu2axlyt2WhyI8adu1/+mFefvlo0BcRtarQRLoHicQR\nnxF5N8yHpuWqV1dZRdwO\n\u003dZTSn\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "271a2348_46a3a26e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2017-06-16T16:11:44Z",
      "side": 1,
      "message": "I wish there were a way to mark a change RFC without having to remember to edit the commit message later.\n\nIs Code-Review-2 the only way to do that?",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 5
      },
      "revId": "e7135289e4cf3e8f059a7120a96ae87b1be46857",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "881b97ca_477d5ee3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-06-16T17:56:18Z",
      "side": 1,
      "message": "\u003e I wish there were a way to mark a change RFC without having to\n \u003e remember to edit the commit message later.\n \u003e \n \u003e Is Code-Review-2 the only way to do that?\n\nNope, Change Owner and Site Administrator can toggle the WIP state. Change in WIP state can\u0027t be merged. Use what you sell.",
      "parentUuid": "271a2348_46a3a26e",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 5
      },
      "revId": "e7135289e4cf3e8f059a7120a96ae87b1be46857",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1894448b_e5324157",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-06-16T20:25:21Z",
      "side": 1,
      "message": "Both of those alternatives accomplish the goal of not accidentally submitting without taking an additional action. So would e.g. having a validator that checks for \"DO NOT SUBMIT\" in commit messages.\n\nNone of the options feel like they\u0027re perfectly expressing my intent, which is that the code is complete and good enough to be submitted as-is, if there is consensus that this is the way forward. WIP kind of implies to me that the code is not complete; CR-2 kind of implies that it\u0027s not good enough to submit. But they are both close enough to my intent that I certainly don\u0027t think it\u0027s worth writing additional code and complicating the Gerrit workflow to express it more perfectly.\n\nActually, now that I\u0027ve written that, \"submitted as-is, if there is consensus that this is the way forward\" sounds an awful lot like a bog-standard code review. The difference, I guess, is that consensus implies more than one person, and we don\u0027t have a way to express that I want LGTMs from multiple people.\n\nJust food for thought. In practice, in the future I will just pick one of the above options in preference to \"RFC\".",
      "parentUuid": "881b97ca_477d5ee3",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 5
      },
      "revId": "e7135289e4cf3e8f059a7120a96ae87b1be46857",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b66830c5_212a0bcd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-06-17T05:27:41Z",
      "side": 1,
      "message": "\u003e Just food for thought. In practice, in the future I will just pick\n \u003e one of the above options in preference to \"RFC\".\n\nI agree. Both options don\u0027t precisely express what RFC actually trying to say: require more than one Code-Review approvals. Moreover, both options are volatile and are not persisted in the git history in any way. \n\nBut, hey we are already using project specific rules in gerrit. So, one option is to extend the rule with Multiple-Approval semantic.\n\nWe can even let \"RFC:\" or alternatively, replace it with Multiple-Approval-Required (MAR) in subject or footer. The new prolog predicate would scan commit message and when MAR thing is detected, the number of required approvals is greater than 1. Done. No more pre-submit actions needed.\n\nEven better, because MAR is persisted in the commit message now, it\u0027s even documented, for the next generations, that this change was subtle enough to require more than 4 eyes (or even only 2, in case we had self-approval).",
      "parentUuid": "1894448b_e5324157",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 5
      },
      "revId": "e7135289e4cf3e8f059a7120a96ae87b1be46857",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}